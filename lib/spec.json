{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://apigateway.amazonaws.com/"
        },
        {
            "url": "http://apigateway.amazonaws.com/"
        }
    ],
    "x-hasEquivalentPaths": true,
    "info": {
        "contact": {
            "email": "mike.ralphson@gmail.com",
            "name": "Mike Ralphson",
            "url": "https://github.com/mermade/aws2openapi",
            "x-twitter": "PermittedSoc"
        },
        "description": "Amazon API Gateway V2",
        "license": {
            "name": "Apache 2.0 License",
            "url": "http://www.apache.org/licenses/"
        },
        "termsOfService": "https://aws.amazon.com/service-terms/",
        "title": "AmazonApiGatewayV2",
        "version": "2018-11-29",
        "x-apiClientRegistration": {
            "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
        },
        "x-apisguru-categories": [
            "cloud"
        ],
        "x-logo": {
            "backgroundColor": "#FFFFFF",
            "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
        },
        "x-origin": [
            {
                "contentType": "application/json",
                "converter": {
                    "url": "https://github.com/mermade/aws2openapi",
                    "version": "1.0.0"
                },
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigatewayv2-2018-11-29.normal.json",
                "x-apisguru-direct": true
            }
        ],
        "x-preferred": true,
        "x-providerName": "amazonaws.com",
        "x-release": "v4",
        "x-serviceName": "apigatewayv2"
    },
    "externalDocs": {
        "description": "Amazon Web Services documentation",
        "url": "https://aws.amazon.com/apigateway/"
    },
    "security": [
        {
            "hmac": []
        }
    ],
    "paths": {
        "/v2/apis": {
            "get": {
                "description": "Gets a collection of Api resources.",
                "operationId": "GetApis",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents an API.",
                                                "properties": {
                                                    "ApiEndpoint": {
                                                        "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                                                        "type": "string"
                                                    },
                                                    "ApiId": {
                                                        "description": "The API ID.",
                                                        "type": "string"
                                                    },
                                                    "ApiKeySelectionExpression": {
                                                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                                                        "type": "string"
                                                    },
                                                    "CreatedDate": {
                                                        "description": "The timestamp when the API was created.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Description": {
                                                        "description": "The description of the API.",
                                                        "type": "string"
                                                    },
                                                    "DisableSchemaValidation": {
                                                        "description": "Avoid validating models when creating a deployment.",
                                                        "type": "boolean"
                                                    },
                                                    "Name": {
                                                        "description": "The name of the API.",
                                                        "type": "string"
                                                    },
                                                    "ProtocolType": {
                                                        "description": "The API protocol: Currently only WEBSOCKET is supported.",
                                                        "enum": [
                                                            "WEBSOCKET"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "RouteSelectionExpression": {
                                                        "description": "The route selection expression for the API.",
                                                        "type": "string"
                                                    },
                                                    "Version": {
                                                        "description": "A version identifier for the API.",
                                                        "type": "string"
                                                    },
                                                    "Warnings": {
                                                        "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "RouteSelectionExpression",
                                                    "ProtocolType",
                                                    "Name"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates an Api resource.",
                "operationId": "CreateApi",
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiEndpoint": {
                                            "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                                            "type": "string"
                                        },
                                        "ApiId": {
                                            "description": "The API ID.",
                                            "type": "string"
                                        },
                                        "ApiKeySelectionExpression": {
                                            "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                                            "type": "string"
                                        },
                                        "CreatedDate": {
                                            "description": "The timestamp when the API was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the API.",
                                            "type": "string"
                                        },
                                        "DisableSchemaValidation": {
                                            "description": "Avoid validating models when creating a deployment.",
                                            "type": "boolean"
                                        },
                                        "Name": {
                                            "description": "The name of the API.",
                                            "type": "string"
                                        },
                                        "ProtocolType": {
                                            "description": "The API protocol: Currently only WEBSOCKET is supported.",
                                            "enum": [
                                                "WEBSOCKET"
                                            ],
                                            "type": "string"
                                        },
                                        "RouteSelectionExpression": {
                                            "description": "The route selection expression for the API.",
                                            "type": "string"
                                        },
                                        "Version": {
                                            "description": "A version identifier for the API.",
                                            "type": "string"
                                        },
                                        "Warnings": {
                                            "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ApiKeySelectionExpression": {
                                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                                        "type": "string"
                                    },
                                    "Description": {
                                        "description": "The description of the API.",
                                        "type": "string"
                                    },
                                    "DisableSchemaValidation": {
                                        "description": "Avoid validating models when creating a deployment.",
                                        "type": "boolean"
                                    },
                                    "Name": {
                                        "description": "The name of the API.",
                                        "type": "string"
                                    },
                                    "ProtocolType": {
                                        "description": "The API protocol: Currently only WEBSOCKET is supported.",
                                        "enum": [
                                            "WEBSOCKET"
                                        ],
                                        "type": "string"
                                    },
                                    "RouteSelectionExpression": {
                                        "description": "The route selection expression for the API.",
                                        "type": "string"
                                    },
                                    "Version": {
                                        "description": "A version identifier for the API.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "RouteSelectionExpression",
                                    "ProtocolType",
                                    "Name"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}": {
            "delete": {
                "description": "Deletes an Api resource.",
                "operationId": "DeleteApi",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets an Api resource.",
                "operationId": "GetApi",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiEndpoint": {
                                            "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                                            "type": "string"
                                        },
                                        "ApiId": {
                                            "description": "The API ID.",
                                            "type": "string"
                                        },
                                        "ApiKeySelectionExpression": {
                                            "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                                            "type": "string"
                                        },
                                        "CreatedDate": {
                                            "description": "The timestamp when the API was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the API.",
                                            "type": "string"
                                        },
                                        "DisableSchemaValidation": {
                                            "description": "Avoid validating models when creating a deployment.",
                                            "type": "boolean"
                                        },
                                        "Name": {
                                            "description": "The name of the API.",
                                            "type": "string"
                                        },
                                        "ProtocolType": {
                                            "description": "The API protocol: Currently only WEBSOCKET is supported.",
                                            "enum": [
                                                "WEBSOCKET"
                                            ],
                                            "type": "string"
                                        },
                                        "RouteSelectionExpression": {
                                            "description": "The route selection expression for the API.",
                                            "type": "string"
                                        },
                                        "Version": {
                                            "description": "A version identifier for the API.",
                                            "type": "string"
                                        },
                                        "Warnings": {
                                            "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates an Api resource.",
                "operationId": "UpdateApi",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiEndpoint": {
                                            "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                                            "type": "string"
                                        },
                                        "ApiId": {
                                            "description": "The API ID.",
                                            "type": "string"
                                        },
                                        "ApiKeySelectionExpression": {
                                            "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                                            "type": "string"
                                        },
                                        "CreatedDate": {
                                            "description": "The timestamp when the API was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the API.",
                                            "type": "string"
                                        },
                                        "DisableSchemaValidation": {
                                            "description": "Avoid validating models when creating a deployment.",
                                            "type": "boolean"
                                        },
                                        "Name": {
                                            "description": "The name of the API.",
                                            "type": "string"
                                        },
                                        "ProtocolType": {
                                            "description": "The API protocol: Currently only WEBSOCKET is supported.",
                                            "enum": [
                                                "WEBSOCKET"
                                            ],
                                            "type": "string"
                                        },
                                        "RouteSelectionExpression": {
                                            "description": "The route selection expression for the API.",
                                            "type": "string"
                                        },
                                        "Version": {
                                            "description": "A version identifier for the API.",
                                            "type": "string"
                                        },
                                        "Warnings": {
                                            "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ApiKeySelectionExpression": {
                                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                                        "type": "string"
                                    },
                                    "Description": {
                                        "description": "The description of the API.",
                                        "type": "string"
                                    },
                                    "DisableSchemaValidation": {
                                        "description": "Avoid validating models when creating a deployment.",
                                        "type": "boolean"
                                    },
                                    "Name": {
                                        "description": "The name of the API.",
                                        "type": "string"
                                    },
                                    "RouteSelectionExpression": {
                                        "description": "The route selection expression for the API.",
                                        "type": "string"
                                    },
                                    "Version": {
                                        "description": "A version identifier for the API.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/authorizers": {
            "get": {
                "description": "Gets the Authorizers for an API.",
                "operationId": "GetAuthorizers",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents an authorizer.",
                                                "properties": {
                                                    "AuthorizerCredentialsArn": {
                                                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                                                        "type": "string"
                                                    },
                                                    "AuthorizerId": {
                                                        "description": "The authorizer identifier.",
                                                        "type": "string"
                                                    },
                                                    "AuthorizerResultTtlInSeconds": {
                                                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                                                        "maximum": 2147483647,
                                                        "minimum": -2147483648,
                                                        "type": "integer"
                                                    },
                                                    "AuthorizerType": {
                                                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                                                        "enum": [
                                                            "REQUEST"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "AuthorizerUri": {
                                                        "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                                                        "type": "string"
                                                    },
                                                    "IdentitySource": {
                                                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "IdentityValidationExpression": {
                                                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                                                        "type": "string"
                                                    },
                                                    "Name": {
                                                        "description": "The name of the authorizer.",
                                                        "type": "string"
                                                    },
                                                    "ProviderArns": {
                                                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                                                        "items": {
                                                            "description": "Represents an Amazon Resource Name (ARN).",
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "Name"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates an Authorizer for an API.",
                "operationId": "CreateAuthorizer",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "AuthorizerCredentialsArn": {
                                            "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                                            "type": "string"
                                        },
                                        "AuthorizerId": {
                                            "description": "The authorizer identifier.",
                                            "type": "string"
                                        },
                                        "AuthorizerResultTtlInSeconds": {
                                            "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                                            "maximum": 2147483647,
                                            "minimum": -2147483648,
                                            "type": "integer"
                                        },
                                        "AuthorizerType": {
                                            "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                                            "enum": [
                                                "REQUEST"
                                            ],
                                            "type": "string"
                                        },
                                        "AuthorizerUri": {
                                            "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                                            "type": "string"
                                        },
                                        "IdentitySource": {
                                            "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "IdentityValidationExpression": {
                                            "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                                            "type": "string"
                                        },
                                        "Name": {
                                            "description": "The name of the authorizer.",
                                            "type": "string"
                                        },
                                        "ProviderArns": {
                                            "description": "For\n REQUEST authorizer, this is not\n defined.",
                                            "items": {
                                                "description": "Represents an Amazon Resource Name (ARN).",
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AuthorizerCredentialsArn": {
                                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                                        "type": "string"
                                    },
                                    "AuthorizerResultTtlInSeconds": {
                                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                                        "maximum": 2147483647,
                                        "minimum": -2147483648,
                                        "type": "integer"
                                    },
                                    "AuthorizerType": {
                                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                                        "enum": [
                                            "REQUEST"
                                        ],
                                        "type": "string"
                                    },
                                    "AuthorizerUri": {
                                        "description": "The authorizer's Uniform Resource Identifier (URI). For\n REQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                                        "type": "string"
                                    },
                                    "IdentitySource": {
                                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "IdentityValidationExpression": {
                                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                                        "type": "string"
                                    },
                                    "Name": {
                                        "description": "The name of the authorizer.",
                                        "type": "string"
                                    },
                                    "ProviderArns": {
                                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                                        "items": {
                                            "description": "Represents an Amazon Resource Name (ARN).",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "AuthorizerUri",
                                    "AuthorizerType",
                                    "IdentitySource",
                                    "Name"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/authorizers/{authorizerId}": {
            "delete": {
                "description": "Deletes an Authorizer.",
                "operationId": "DeleteAuthorizer",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "authorizerId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets an Authorizer.",
                "operationId": "GetAuthorizer",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "authorizerId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "AuthorizerCredentialsArn": {
                                            "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                                            "type": "string"
                                        },
                                        "AuthorizerId": {
                                            "description": "The authorizer identifier.",
                                            "type": "string"
                                        },
                                        "AuthorizerResultTtlInSeconds": {
                                            "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                                            "maximum": 2147483647,
                                            "minimum": -2147483648,
                                            "type": "integer"
                                        },
                                        "AuthorizerType": {
                                            "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                                            "enum": [
                                                "REQUEST"
                                            ],
                                            "type": "string"
                                        },
                                        "AuthorizerUri": {
                                            "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                                            "type": "string"
                                        },
                                        "IdentitySource": {
                                            "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "IdentityValidationExpression": {
                                            "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                                            "type": "string"
                                        },
                                        "Name": {
                                            "description": "The name of the authorizer.",
                                            "type": "string"
                                        },
                                        "ProviderArns": {
                                            "description": "For\n REQUEST authorizer, this is not\n defined.",
                                            "items": {
                                                "description": "Represents an Amazon Resource Name (ARN).",
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates an Authorizer.",
                "operationId": "UpdateAuthorizer",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "authorizerId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "AuthorizerCredentialsArn": {
                                            "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                                            "type": "string"
                                        },
                                        "AuthorizerId": {
                                            "description": "The authorizer identifier.",
                                            "type": "string"
                                        },
                                        "AuthorizerResultTtlInSeconds": {
                                            "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                                            "maximum": 2147483647,
                                            "minimum": -2147483648,
                                            "type": "integer"
                                        },
                                        "AuthorizerType": {
                                            "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                                            "enum": [
                                                "REQUEST"
                                            ],
                                            "type": "string"
                                        },
                                        "AuthorizerUri": {
                                            "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                                            "type": "string"
                                        },
                                        "IdentitySource": {
                                            "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "IdentityValidationExpression": {
                                            "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                                            "type": "string"
                                        },
                                        "Name": {
                                            "description": "The name of the authorizer.",
                                            "type": "string"
                                        },
                                        "ProviderArns": {
                                            "description": "For\n REQUEST authorizer, this is not\n defined.",
                                            "items": {
                                                "description": "Represents an Amazon Resource Name (ARN).",
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AuthorizerCredentialsArn": {
                                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                                        "type": "string"
                                    },
                                    "AuthorizerResultTtlInSeconds": {
                                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it is zero,\n authorization caching is disabled. If it is greater than zero, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                                        "maximum": 2147483647,
                                        "minimum": -2147483648,
                                        "type": "integer"
                                    },
                                    "AuthorizerType": {
                                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                                        "enum": [
                                            "REQUEST"
                                        ],
                                        "type": "string"
                                    },
                                    "AuthorizerUri": {
                                        "description": "The authorizer's Uniform Resource Identifier (URI). For\n REQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                                        "type": "string"
                                    },
                                    "IdentitySource": {
                                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth header, a\n Name query string parameter are defined as identity sources, this value is\n $method.request.header.Auth, $method.request.querystring.Name. These\n parameters will be used to derive the authorization caching key and to perform\n runtime validation of the REQUEST authorizer by verifying all of the\n identity-related request parameters are present, not null and non-empty. Only when\n this is true does the authorizer invoke the authorizer Lambda function, otherwise, it\n returns a 401 Unauthorized response without calling the Lambda function.\n The valid value is a string of comma-separated mapping expressions of the specified\n request parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "IdentityValidationExpression": {
                                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                                        "type": "string"
                                    },
                                    "Name": {
                                        "description": "The name of the authorizer.",
                                        "type": "string"
                                    },
                                    "ProviderArns": {
                                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                                        "items": {
                                            "description": "Represents an Amazon Resource Name (ARN).",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/deployments": {
            "get": {
                "description": "Gets the Deployments for an API.",
                "operationId": "GetDeployments",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "An immutable representation of an API that can be called by users. A\n Deployment must be associated with a Stage for it to be\n callable over the internet.",
                                                "properties": {
                                                    "CreatedDate": {
                                                        "description": "The date and time when the Deployment resource was created.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "DeploymentId": {
                                                        "description": "The identifier for the deployment.",
                                                        "type": "string"
                                                    },
                                                    "DeploymentStatus": {
                                                        "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                                                        "enum": [
                                                            "PENDING",
                                                            "FAILED",
                                                            "DEPLOYED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "DeploymentStatusMessage": {
                                                        "description": "May contain additional feedback on the status of an API deployment.",
                                                        "type": "string"
                                                    },
                                                    "Description": {
                                                        "description": "The description for the deployment.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a Deployment for an API.",
                "operationId": "CreateDeployment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "CreatedDate": {
                                            "description": "The date and time when the Deployment resource was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "DeploymentId": {
                                            "description": "The identifier for the deployment.",
                                            "type": "string"
                                        },
                                        "DeploymentStatus": {
                                            "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                                            "enum": [
                                                "PENDING",
                                                "FAILED",
                                                "DEPLOYED"
                                            ],
                                            "type": "string"
                                        },
                                        "DeploymentStatusMessage": {
                                            "description": "May contain additional feedback on the status of an API deployment.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description for the deployment.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Description": {
                                        "description": "The description for the deployment resource.",
                                        "type": "string"
                                    },
                                    "StageName": {
                                        "description": "The name of the Stage resource for the Deployment\n resource to create.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/deployments/{deploymentId}": {
            "delete": {
                "description": "Deletes a Deployment.",
                "operationId": "DeleteDeployment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "deploymentId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets a Deployment.",
                "operationId": "GetDeployment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "deploymentId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "CreatedDate": {
                                            "description": "The date and time when the Deployment resource was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "DeploymentId": {
                                            "description": "The identifier for the deployment.",
                                            "type": "string"
                                        },
                                        "DeploymentStatus": {
                                            "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                                            "enum": [
                                                "PENDING",
                                                "FAILED",
                                                "DEPLOYED"
                                            ],
                                            "type": "string"
                                        },
                                        "DeploymentStatusMessage": {
                                            "description": "May contain additional feedback on the status of an API deployment.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description for the deployment.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates a Deployment.",
                "operationId": "UpdateDeployment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "deploymentId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "CreatedDate": {
                                            "description": "The date and time when the Deployment resource was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "DeploymentId": {
                                            "description": "The identifier for the deployment.",
                                            "type": "string"
                                        },
                                        "DeploymentStatus": {
                                            "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                                            "enum": [
                                                "PENDING",
                                                "FAILED",
                                                "DEPLOYED"
                                            ],
                                            "type": "string"
                                        },
                                        "DeploymentStatusMessage": {
                                            "description": "May contain additional feedback on the status of an API deployment.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description for the deployment.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Description": {
                                        "description": "The description for the deployment resource.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/integrations": {
            "get": {
                "description": "Gets the Integrations for an API.",
                "operationId": "GetIntegrations",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents an integration.",
                                                "properties": {
                                                    "ConnectionId": {
                                                        "description": "The connection ID.",
                                                        "type": "string"
                                                    },
                                                    "ConnectionType": {
                                                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                                                        "enum": [
                                                            "INTERNET",
                                                            "VPC_LINK"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "ContentHandlingStrategy": {
                                                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                                        "enum": [
                                                            "CONVERT_TO_BINARY",
                                                            "CONVERT_TO_TEXT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "CredentialsArn": {
                                                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                                                        "type": "string"
                                                    },
                                                    "Description": {
                                                        "description": "Represents the description of an integration.",
                                                        "type": "string"
                                                    },
                                                    "IntegrationId": {
                                                        "description": "Represents the identifier of an integration.",
                                                        "type": "string"
                                                    },
                                                    "IntegrationMethod": {
                                                        "description": "Specifies the integration's HTTP method type.",
                                                        "type": "string"
                                                    },
                                                    "IntegrationResponseSelectionExpression": {
                                                        "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                                                        "type": "string"
                                                    },
                                                    "IntegrationType": {
                                                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                                                        "enum": [
                                                            "AWS",
                                                            "HTTP",
                                                            "MOCK",
                                                            "HTTP_PROXY",
                                                            "AWS_PROXY"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "IntegrationUri": {
                                                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                                                        "type": "string"
                                                    },
                                                    "PassthroughBehavior": {
                                                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                                                        "enum": [
                                                            "WHEN_NO_MATCH",
                                                            "NEVER",
                                                            "WHEN_NO_TEMPLATES"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "RequestParameters": {
                                                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "A string with a length between [1-512].",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "RequestTemplates": {
                                                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "A string with a length between [0-32768].",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "TemplateSelectionExpression": {
                                                        "description": "The template selection expression for the integration.",
                                                        "type": "string"
                                                    },
                                                    "TimeoutInMillis": {
                                                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                                                        "maximum": 2147483647,
                                                        "minimum": -2147483648,
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates an Integration.",
                "operationId": "CreateIntegration",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ConnectionId": {
                                            "description": "The connection ID.",
                                            "type": "string"
                                        },
                                        "ConnectionType": {
                                            "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                                            "enum": [
                                                "INTERNET",
                                                "VPC_LINK"
                                            ],
                                            "type": "string"
                                        },
                                        "ContentHandlingStrategy": {
                                            "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                            "enum": [
                                                "CONVERT_TO_BINARY",
                                                "CONVERT_TO_TEXT"
                                            ],
                                            "type": "string"
                                        },
                                        "CredentialsArn": {
                                            "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "Represents the description of an integration.",
                                            "type": "string"
                                        },
                                        "IntegrationId": {
                                            "description": "Represents the identifier of an integration.",
                                            "type": "string"
                                        },
                                        "IntegrationMethod": {
                                            "description": "Specifies the integration's HTTP method type.",
                                            "type": "string"
                                        },
                                        "IntegrationResponseSelectionExpression": {
                                            "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                                            "type": "string"
                                        },
                                        "IntegrationType": {
                                            "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                                            "enum": [
                                                "AWS",
                                                "HTTP",
                                                "MOCK",
                                                "HTTP_PROXY",
                                                "AWS_PROXY"
                                            ],
                                            "type": "string"
                                        },
                                        "IntegrationUri": {
                                            "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                                            "type": "string"
                                        },
                                        "PassthroughBehavior": {
                                            "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                                            "enum": [
                                                "WHEN_NO_MATCH",
                                                "NEVER",
                                                "WHEN_NO_TEMPLATES"
                                            ],
                                            "type": "string"
                                        },
                                        "RequestParameters": {
                                            "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-512].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RequestTemplates": {
                                            "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-32768].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "TemplateSelectionExpression": {
                                            "description": "The template selection expression for the integration.",
                                            "type": "string"
                                        },
                                        "TimeoutInMillis": {
                                            "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                                            "maximum": 2147483647,
                                            "minimum": -2147483648,
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ConnectionId": {
                                        "description": "The connection ID.",
                                        "type": "string"
                                    },
                                    "ConnectionType": {
                                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                                        "enum": [
                                            "INTERNET",
                                            "VPC_LINK"
                                        ],
                                        "type": "string"
                                    },
                                    "ContentHandlingStrategy": {
                                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                        "enum": [
                                            "CONVERT_TO_BINARY",
                                            "CONVERT_TO_TEXT"
                                        ],
                                        "type": "string"
                                    },
                                    "CredentialsArn": {
                                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                                        "type": "string"
                                    },
                                    "Description": {
                                        "description": "The description of the integration.",
                                        "type": "string"
                                    },
                                    "IntegrationMethod": {
                                        "description": "Specifies the integration's HTTP method type.",
                                        "type": "string"
                                    },
                                    "IntegrationType": {
                                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                                        "enum": [
                                            "AWS",
                                            "HTTP",
                                            "MOCK",
                                            "HTTP_PROXY",
                                            "AWS_PROXY"
                                        ],
                                        "type": "string"
                                    },
                                    "IntegrationUri": {
                                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                                        "type": "string"
                                    },
                                    "PassthroughBehavior": {
                                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                                        "enum": [
                                            "WHEN_NO_MATCH",
                                            "NEVER",
                                            "WHEN_NO_TEMPLATES"
                                        ],
                                        "type": "string"
                                    },
                                    "RequestParameters": {
                                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [1-512].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "RequestTemplates": {
                                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [0-32768].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "TemplateSelectionExpression": {
                                        "description": "The template selection expression for the integration.",
                                        "type": "string"
                                    },
                                    "TimeoutInMillis": {
                                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                                        "maximum": 2147483647,
                                        "minimum": -2147483648,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "IntegrationType"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/integrations/{integrationId}": {
            "delete": {
                "description": "Deletes an Integration.",
                "operationId": "DeleteIntegration",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets an Integration.",
                "operationId": "GetIntegration",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ConnectionId": {
                                            "description": "The connection ID.",
                                            "type": "string"
                                        },
                                        "ConnectionType": {
                                            "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                                            "enum": [
                                                "INTERNET",
                                                "VPC_LINK"
                                            ],
                                            "type": "string"
                                        },
                                        "ContentHandlingStrategy": {
                                            "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                            "enum": [
                                                "CONVERT_TO_BINARY",
                                                "CONVERT_TO_TEXT"
                                            ],
                                            "type": "string"
                                        },
                                        "CredentialsArn": {
                                            "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "Represents the description of an integration.",
                                            "type": "string"
                                        },
                                        "IntegrationId": {
                                            "description": "Represents the identifier of an integration.",
                                            "type": "string"
                                        },
                                        "IntegrationMethod": {
                                            "description": "Specifies the integration's HTTP method type.",
                                            "type": "string"
                                        },
                                        "IntegrationResponseSelectionExpression": {
                                            "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                                            "type": "string"
                                        },
                                        "IntegrationType": {
                                            "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                                            "enum": [
                                                "AWS",
                                                "HTTP",
                                                "MOCK",
                                                "HTTP_PROXY",
                                                "AWS_PROXY"
                                            ],
                                            "type": "string"
                                        },
                                        "IntegrationUri": {
                                            "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                                            "type": "string"
                                        },
                                        "PassthroughBehavior": {
                                            "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                                            "enum": [
                                                "WHEN_NO_MATCH",
                                                "NEVER",
                                                "WHEN_NO_TEMPLATES"
                                            ],
                                            "type": "string"
                                        },
                                        "RequestParameters": {
                                            "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-512].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RequestTemplates": {
                                            "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-32768].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "TemplateSelectionExpression": {
                                            "description": "The template selection expression for the integration.",
                                            "type": "string"
                                        },
                                        "TimeoutInMillis": {
                                            "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                                            "maximum": 2147483647,
                                            "minimum": -2147483648,
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates an Integration.",
                "operationId": "UpdateIntegration",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ConnectionId": {
                                            "description": "The connection ID.",
                                            "type": "string"
                                        },
                                        "ConnectionType": {
                                            "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                                            "enum": [
                                                "INTERNET",
                                                "VPC_LINK"
                                            ],
                                            "type": "string"
                                        },
                                        "ContentHandlingStrategy": {
                                            "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                            "enum": [
                                                "CONVERT_TO_BINARY",
                                                "CONVERT_TO_TEXT"
                                            ],
                                            "type": "string"
                                        },
                                        "CredentialsArn": {
                                            "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "Represents the description of an integration.",
                                            "type": "string"
                                        },
                                        "IntegrationId": {
                                            "description": "Represents the identifier of an integration.",
                                            "type": "string"
                                        },
                                        "IntegrationMethod": {
                                            "description": "Specifies the integration's HTTP method type.",
                                            "type": "string"
                                        },
                                        "IntegrationResponseSelectionExpression": {
                                            "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                                            "type": "string"
                                        },
                                        "IntegrationType": {
                                            "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                                            "enum": [
                                                "AWS",
                                                "HTTP",
                                                "MOCK",
                                                "HTTP_PROXY",
                                                "AWS_PROXY"
                                            ],
                                            "type": "string"
                                        },
                                        "IntegrationUri": {
                                            "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                                            "type": "string"
                                        },
                                        "PassthroughBehavior": {
                                            "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                                            "enum": [
                                                "WHEN_NO_MATCH",
                                                "NEVER",
                                                "WHEN_NO_TEMPLATES"
                                            ],
                                            "type": "string"
                                        },
                                        "RequestParameters": {
                                            "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-512].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RequestTemplates": {
                                            "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-32768].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "TemplateSelectionExpression": {
                                            "description": "The template selection expression for the integration.",
                                            "type": "string"
                                        },
                                        "TimeoutInMillis": {
                                            "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                                            "maximum": 2147483647,
                                            "minimum": -2147483648,
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ConnectionId": {
                                        "description": "The connection ID.",
                                        "type": "string"
                                    },
                                    "ConnectionType": {
                                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                                        "enum": [
                                            "INTERNET",
                                            "VPC_LINK"
                                        ],
                                        "type": "string"
                                    },
                                    "ContentHandlingStrategy": {
                                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                        "enum": [
                                            "CONVERT_TO_BINARY",
                                            "CONVERT_TO_TEXT"
                                        ],
                                        "type": "string"
                                    },
                                    "CredentialsArn": {
                                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                                        "type": "string"
                                    },
                                    "Description": {
                                        "description": "The description of the integration",
                                        "type": "string"
                                    },
                                    "IntegrationMethod": {
                                        "description": "Specifies the integration's HTTP method type.",
                                        "type": "string"
                                    },
                                    "IntegrationType": {
                                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                                        "enum": [
                                            "AWS",
                                            "HTTP",
                                            "MOCK",
                                            "HTTP_PROXY",
                                            "AWS_PROXY"
                                        ],
                                        "type": "string"
                                    },
                                    "IntegrationUri": {
                                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                                        "type": "string"
                                    },
                                    "PassthroughBehavior": {
                                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                                        "enum": [
                                            "WHEN_NO_MATCH",
                                            "NEVER",
                                            "WHEN_NO_TEMPLATES"
                                        ],
                                        "type": "string"
                                    },
                                    "RequestParameters": {
                                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [1-512].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "RequestTemplates": {
                                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [0-32768].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "TemplateSelectionExpression": {
                                        "description": "The template selection expression for the integration.",
                                        "type": "string"
                                    },
                                    "TimeoutInMillis": {
                                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                                        "maximum": 2147483647,
                                        "minimum": -2147483648,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses": {
            "get": {
                "description": "Gets the IntegrationResponses for an Integration.",
                "operationId": "GetIntegrationResponses",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents an integration response.",
                                                "properties": {
                                                    "ContentHandlingStrategy": {
                                                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                                        "enum": [
                                                            "CONVERT_TO_BINARY",
                                                            "CONVERT_TO_TEXT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "IntegrationResponseId": {
                                                        "description": "The integration response ID.",
                                                        "type": "string"
                                                    },
                                                    "IntegrationResponseKey": {
                                                        "description": "The integration response key.",
                                                        "type": "string"
                                                    },
                                                    "ResponseParameters": {
                                                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "A string with a length between [1-512].",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "ResponseTemplates": {
                                                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "A string with a length between [0-32768].",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "TemplateSelectionExpression": {
                                                        "description": "The template selection expressions for the integration response.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "IntegrationResponseKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates an IntegrationResponses.",
                "operationId": "CreateIntegrationResponse",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ContentHandlingStrategy": {
                                            "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                            "enum": [
                                                "CONVERT_TO_BINARY",
                                                "CONVERT_TO_TEXT"
                                            ],
                                            "type": "string"
                                        },
                                        "IntegrationResponseId": {
                                            "description": "The integration response ID.",
                                            "type": "string"
                                        },
                                        "IntegrationResponseKey": {
                                            "description": "The integration response key.",
                                            "type": "string"
                                        },
                                        "ResponseParameters": {
                                            "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-512].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResponseTemplates": {
                                            "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-32768].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "TemplateSelectionExpression": {
                                            "description": "The template selection expressions for the integration response.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ContentHandlingStrategy": {
                                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                        "enum": [
                                            "CONVERT_TO_BINARY",
                                            "CONVERT_TO_TEXT"
                                        ],
                                        "type": "string"
                                    },
                                    "IntegrationResponseKey": {
                                        "description": "The integration response key.",
                                        "type": "string"
                                    },
                                    "ResponseParameters": {
                                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name},\n where {name} is a valid and unique header name. The mapped non-static\n value must match the pattern of integration.response.header.{name} or\n integration.response.body.{JSON-expression}, where\n {name} is a valid and unique response header name and\n {JSON-expression} is a valid JSON expression without the $\n prefix.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [1-512].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ResponseTemplates": {
                                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [0-32768].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "TemplateSelectionExpression": {
                                        "description": "The template selection expression for the integration response.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "IntegrationResponseKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}": {
            "delete": {
                "description": "Deletes an IntegrationResponses.",
                "operationId": "DeleteIntegrationResponse",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationResponseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets an IntegrationResponses.",
                "operationId": "GetIntegrationResponse",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationResponseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ContentHandlingStrategy": {
                                            "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                            "enum": [
                                                "CONVERT_TO_BINARY",
                                                "CONVERT_TO_TEXT"
                                            ],
                                            "type": "string"
                                        },
                                        "IntegrationResponseId": {
                                            "description": "The integration response ID.",
                                            "type": "string"
                                        },
                                        "IntegrationResponseKey": {
                                            "description": "The integration response key.",
                                            "type": "string"
                                        },
                                        "ResponseParameters": {
                                            "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-512].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResponseTemplates": {
                                            "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-32768].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "TemplateSelectionExpression": {
                                            "description": "The template selection expressions for the integration response.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates an IntegrationResponses.",
                "operationId": "UpdateIntegrationResponse",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationResponseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ContentHandlingStrategy": {
                                            "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                            "enum": [
                                                "CONVERT_TO_BINARY",
                                                "CONVERT_TO_TEXT"
                                            ],
                                            "type": "string"
                                        },
                                        "IntegrationResponseId": {
                                            "description": "The integration response ID.",
                                            "type": "string"
                                        },
                                        "IntegrationResponseKey": {
                                            "description": "The integration response key.",
                                            "type": "string"
                                        },
                                        "ResponseParameters": {
                                            "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-512].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResponseTemplates": {
                                            "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-32768].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "TemplateSelectionExpression": {
                                            "description": "The template selection expressions for the integration response.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ContentHandlingStrategy": {
                                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                        "enum": [
                                            "CONVERT_TO_BINARY",
                                            "CONVERT_TO_TEXT"
                                        ],
                                        "type": "string"
                                    },
                                    "IntegrationResponseKey": {
                                        "description": "The integration response key.",
                                        "type": "string"
                                    },
                                    "ResponseParameters": {
                                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of\n method.response.header.{name}\n , where name is a valid and unique header name. The mapped non-static value\n must match the pattern of\n integration.response.header.{name}\n  or\n integration.response.body.{JSON-expression}\n , where \n {name}\n  is a valid and unique response header name and \n {JSON-expression}\n  is a valid JSON expression without the $ prefix.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [1-512].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ResponseTemplates": {
                                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [0-32768].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "TemplateSelectionExpression": {
                                        "description": "The template selection expression for the integration response.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/models": {
            "get": {
                "description": "Gets the Models for an API.",
                "operationId": "GetModels",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents a data model for an API. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html\">Create Models and Mapping Templates for Request and Response\n Mappings</a>.",
                                                "properties": {
                                                    "ContentType": {
                                                        "description": "The content-type for the model, for example, \"application/json\".",
                                                        "type": "string"
                                                    },
                                                    "Description": {
                                                        "description": "The description of the model.",
                                                        "type": "string"
                                                    },
                                                    "ModelId": {
                                                        "description": "The model identifier.",
                                                        "type": "string"
                                                    },
                                                    "Name": {
                                                        "description": "The name of the model. Must be alphanumeric.",
                                                        "type": "string"
                                                    },
                                                    "Schema": {
                                                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Name"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a Model for an API.",
                "operationId": "CreateModel",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ContentType": {
                                            "description": "The content-type for the model, for example, \"application/json\".",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the model.",
                                            "type": "string"
                                        },
                                        "ModelId": {
                                            "description": "The model identifier.",
                                            "type": "string"
                                        },
                                        "Name": {
                                            "description": "The name of the model. Must be alphanumeric.",
                                            "type": "string"
                                        },
                                        "Schema": {
                                            "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ContentType": {
                                        "description": "The content-type for the model, for example, \"application/json\".",
                                        "type": "string"
                                    },
                                    "Description": {
                                        "description": "The description of the model.",
                                        "type": "string"
                                    },
                                    "Name": {
                                        "description": "The name of the model. Must be alphanumeric.",
                                        "type": "string"
                                    },
                                    "Schema": {
                                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Schema",
                                    "Name"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/models/{modelId}": {
            "delete": {
                "description": "Deletes a Model.",
                "operationId": "DeleteModel",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "modelId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets a Model.",
                "operationId": "GetModel",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "modelId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ContentType": {
                                            "description": "The content-type for the model, for example, \"application/json\".",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the model.",
                                            "type": "string"
                                        },
                                        "ModelId": {
                                            "description": "The model identifier.",
                                            "type": "string"
                                        },
                                        "Name": {
                                            "description": "The name of the model. Must be alphanumeric.",
                                            "type": "string"
                                        },
                                        "Schema": {
                                            "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates a Model.",
                "operationId": "UpdateModel",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "modelId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ContentType": {
                                            "description": "The content-type for the model, for example, \"application/json\".",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the model.",
                                            "type": "string"
                                        },
                                        "ModelId": {
                                            "description": "The model identifier.",
                                            "type": "string"
                                        },
                                        "Name": {
                                            "description": "The name of the model. Must be alphanumeric.",
                                            "type": "string"
                                        },
                                        "Schema": {
                                            "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ContentType": {
                                        "description": "The content-type for the model, for example, \"application/json\".",
                                        "type": "string"
                                    },
                                    "Description": {
                                        "description": "The description of the model.",
                                        "type": "string"
                                    },
                                    "Name": {
                                        "description": "The name of the model.",
                                        "type": "string"
                                    },
                                    "Schema": {
                                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/models/{modelId}/template": {
            "get": {
                "description": "Gets a model template.",
                "operationId": "GetModelTemplate",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "modelId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Value": {
                                            "description": "The template value.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/apis/{apiId}/routes": {
            "get": {
                "description": "Gets the Routes for an API.",
                "operationId": "GetRoutes",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents a route.",
                                                "properties": {
                                                    "ApiKeyRequired": {
                                                        "description": "Specifies whether an API key is required for this route.",
                                                        "type": "boolean"
                                                    },
                                                    "AuthorizationScopes": {
                                                        "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                                                        "items": {
                                                            "description": "A string with a length between [1-64].",
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "AuthorizationType": {
                                                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                                                        "enum": [
                                                            "NONE",
                                                            "AWS_IAM",
                                                            "CUSTOM"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "AuthorizerId": {
                                                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                                                        "type": "string"
                                                    },
                                                    "ModelSelectionExpression": {
                                                        "description": "The model selection expression for the route.",
                                                        "type": "string"
                                                    },
                                                    "OperationName": {
                                                        "description": "The operation name for the route.",
                                                        "type": "string"
                                                    },
                                                    "RequestModels": {
                                                        "description": "The request models for the route.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "A string with a length between [1-128].",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "RequestParameters": {
                                                        "description": "The request parameters for the route.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                                    "properties": {
                                                                        "Required": {
                                                                            "description": "Whether or not the parameter is required.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "RouteId": {
                                                        "description": "The route ID.",
                                                        "type": "string"
                                                    },
                                                    "RouteKey": {
                                                        "description": "The route key for the route.",
                                                        "type": "string"
                                                    },
                                                    "RouteResponseSelectionExpression": {
                                                        "description": "The route response selection expression for the route.",
                                                        "type": "string"
                                                    },
                                                    "Target": {
                                                        "description": "The target for the route.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "RouteKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a Route for an API.",
                "operationId": "CreateRoute",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiKeyRequired": {
                                            "description": "Specifies whether an API key is required for this route.",
                                            "type": "boolean"
                                        },
                                        "AuthorizationScopes": {
                                            "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                                            "items": {
                                                "description": "A string with a length between [1-64].",
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "AuthorizationType": {
                                            "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                                            "enum": [
                                                "NONE",
                                                "AWS_IAM",
                                                "CUSTOM"
                                            ],
                                            "type": "string"
                                        },
                                        "AuthorizerId": {
                                            "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                                            "type": "string"
                                        },
                                        "ModelSelectionExpression": {
                                            "description": "The model selection expression for the route.",
                                            "type": "string"
                                        },
                                        "OperationName": {
                                            "description": "The operation name for the route.",
                                            "type": "string"
                                        },
                                        "RequestModels": {
                                            "description": "The request models for the route.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-128].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RequestParameters": {
                                            "description": "The request parameters for the route.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                        "properties": {
                                                            "Required": {
                                                                "description": "Whether or not the parameter is required.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RouteId": {
                                            "description": "The route ID.",
                                            "type": "string"
                                        },
                                        "RouteKey": {
                                            "description": "The route key for the route.",
                                            "type": "string"
                                        },
                                        "RouteResponseSelectionExpression": {
                                            "description": "The route response selection expression for the route.",
                                            "type": "string"
                                        },
                                        "Target": {
                                            "description": "The target for the route.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ApiKeyRequired": {
                                        "description": "Specifies whether an API key is required for the route.",
                                        "type": "boolean"
                                    },
                                    "AuthorizationScopes": {
                                        "description": "The authorization scopes supported by this\n route.",
                                        "items": {
                                            "description": "A string with a length between [1-64].",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "AuthorizationType": {
                                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer.",
                                        "enum": [
                                            "NONE",
                                            "AWS_IAM",
                                            "CUSTOM"
                                        ],
                                        "type": "string"
                                    },
                                    "AuthorizerId": {
                                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                                        "type": "string"
                                    },
                                    "ModelSelectionExpression": {
                                        "description": "The model selection expression for the route.",
                                        "type": "string"
                                    },
                                    "OperationName": {
                                        "description": "The operation name for the route.",
                                        "type": "string"
                                    },
                                    "RequestModels": {
                                        "description": "The request models for the route.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [1-128].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "RequestParameters": {
                                        "description": "The request parameters for the route.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                    "properties": {
                                                        "Required": {
                                                            "description": "Whether or not the parameter is required.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "RouteKey": {
                                        "description": "The route key for the route.",
                                        "type": "string"
                                    },
                                    "RouteResponseSelectionExpression": {
                                        "description": "The route response selection expression for the route.",
                                        "type": "string"
                                    },
                                    "Target": {
                                        "description": "The target for the route.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "RouteKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/routes/{routeId}": {
            "delete": {
                "description": "Deletes a Route.",
                "operationId": "DeleteRoute",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets a Route.",
                "operationId": "GetRoute",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiKeyRequired": {
                                            "description": "Specifies whether an API key is required for this route.",
                                            "type": "boolean"
                                        },
                                        "AuthorizationScopes": {
                                            "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                                            "items": {
                                                "description": "A string with a length between [1-64].",
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "AuthorizationType": {
                                            "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                                            "enum": [
                                                "NONE",
                                                "AWS_IAM",
                                                "CUSTOM"
                                            ],
                                            "type": "string"
                                        },
                                        "AuthorizerId": {
                                            "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                                            "type": "string"
                                        },
                                        "ModelSelectionExpression": {
                                            "description": "The model selection expression for the route.",
                                            "type": "string"
                                        },
                                        "OperationName": {
                                            "description": "The operation name for the route.",
                                            "type": "string"
                                        },
                                        "RequestModels": {
                                            "description": "The request models for the route.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-128].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RequestParameters": {
                                            "description": "The request parameters for the route.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                        "properties": {
                                                            "Required": {
                                                                "description": "Whether or not the parameter is required.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RouteId": {
                                            "description": "The route ID.",
                                            "type": "string"
                                        },
                                        "RouteKey": {
                                            "description": "The route key for the route.",
                                            "type": "string"
                                        },
                                        "RouteResponseSelectionExpression": {
                                            "description": "The route response selection expression for the route.",
                                            "type": "string"
                                        },
                                        "Target": {
                                            "description": "The target for the route.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates a Route.",
                "operationId": "UpdateRoute",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiKeyRequired": {
                                            "description": "Specifies whether an API key is required for this route.",
                                            "type": "boolean"
                                        },
                                        "AuthorizationScopes": {
                                            "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                                            "items": {
                                                "description": "A string with a length between [1-64].",
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "AuthorizationType": {
                                            "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                                            "enum": [
                                                "NONE",
                                                "AWS_IAM",
                                                "CUSTOM"
                                            ],
                                            "type": "string"
                                        },
                                        "AuthorizerId": {
                                            "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                                            "type": "string"
                                        },
                                        "ModelSelectionExpression": {
                                            "description": "The model selection expression for the route.",
                                            "type": "string"
                                        },
                                        "OperationName": {
                                            "description": "The operation name for the route.",
                                            "type": "string"
                                        },
                                        "RequestModels": {
                                            "description": "The request models for the route.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-128].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RequestParameters": {
                                            "description": "The request parameters for the route.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                        "properties": {
                                                            "Required": {
                                                                "description": "Whether or not the parameter is required.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RouteId": {
                                            "description": "The route ID.",
                                            "type": "string"
                                        },
                                        "RouteKey": {
                                            "description": "The route key for the route.",
                                            "type": "string"
                                        },
                                        "RouteResponseSelectionExpression": {
                                            "description": "The route response selection expression for the route.",
                                            "type": "string"
                                        },
                                        "Target": {
                                            "description": "The target for the route.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ApiKeyRequired": {
                                        "description": "Specifies whether an API key is required for the route.",
                                        "type": "boolean"
                                    },
                                    "AuthorizationScopes": {
                                        "description": "The authorization scopes supported by this\n route.",
                                        "items": {
                                            "description": "A string with a length between [1-64].",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "AuthorizationType": {
                                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer.",
                                        "enum": [
                                            "NONE",
                                            "AWS_IAM",
                                            "CUSTOM"
                                        ],
                                        "type": "string"
                                    },
                                    "AuthorizerId": {
                                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                                        "type": "string"
                                    },
                                    "ModelSelectionExpression": {
                                        "description": "The model selection expression for the route.",
                                        "type": "string"
                                    },
                                    "OperationName": {
                                        "description": "The operation name for the route.",
                                        "type": "string"
                                    },
                                    "RequestModels": {
                                        "description": "The request models for the route.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [1-128].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "RequestParameters": {
                                        "description": "The request parameters for the route.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                    "properties": {
                                                        "Required": {
                                                            "description": "Whether or not the parameter is required.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "RouteKey": {
                                        "description": "The route key for the route.",
                                        "type": "string"
                                    },
                                    "RouteResponseSelectionExpression": {
                                        "description": "The route response selection expression for the route.",
                                        "type": "string"
                                    },
                                    "Target": {
                                        "description": "The target for the route.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/routes/{routeId}/routeresponses": {
            "get": {
                "description": "Gets the RouteResponses for a Route.",
                "operationId": "GetRouteResponses",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents a route response.",
                                                "properties": {
                                                    "ModelSelectionExpression": {
                                                        "description": "Represents the model selection expression of a route response.",
                                                        "type": "string"
                                                    },
                                                    "ResponseModels": {
                                                        "description": "Represents the response models of a route response.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "A string with a length between [1-128].",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "ResponseParameters": {
                                                        "description": "Represents the response parameters of a route response.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                                    "properties": {
                                                                        "Required": {
                                                                            "description": "Whether or not the parameter is required.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "RouteResponseId": {
                                                        "description": "Represents the identifier of a route response.",
                                                        "type": "string"
                                                    },
                                                    "RouteResponseKey": {
                                                        "description": "Represents the route response key of a route response.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "RouteResponseKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a RouteResponse for a Route.",
                "operationId": "CreateRouteResponse",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ModelSelectionExpression": {
                                            "description": "Represents the model selection expression of a route response.",
                                            "type": "string"
                                        },
                                        "ResponseModels": {
                                            "description": "Represents the response models of a route response.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-128].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResponseParameters": {
                                            "description": "Represents the response parameters of a route response.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                        "properties": {
                                                            "Required": {
                                                                "description": "Whether or not the parameter is required.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RouteResponseId": {
                                            "description": "Represents the identifier of a route response.",
                                            "type": "string"
                                        },
                                        "RouteResponseKey": {
                                            "description": "Represents the route response key of a route response.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ModelSelectionExpression": {
                                        "description": "The model selection expression for the route response.",
                                        "type": "string"
                                    },
                                    "ResponseModels": {
                                        "description": "The response models for the route response.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [1-128].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ResponseParameters": {
                                        "description": "The route response parameters.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                    "properties": {
                                                        "Required": {
                                                            "description": "Whether or not the parameter is required.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "RouteResponseKey": {
                                        "description": "The route response key.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "RouteResponseKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}": {
            "delete": {
                "description": "Deletes a RouteResponse.",
                "operationId": "DeleteRouteResponse",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeResponseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets a RouteResponse.",
                "operationId": "GetRouteResponse",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeResponseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ModelSelectionExpression": {
                                            "description": "Represents the model selection expression of a route response.",
                                            "type": "string"
                                        },
                                        "ResponseModels": {
                                            "description": "Represents the response models of a route response.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-128].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResponseParameters": {
                                            "description": "Represents the response parameters of a route response.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                        "properties": {
                                                            "Required": {
                                                                "description": "Whether or not the parameter is required.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RouteResponseId": {
                                            "description": "Represents the identifier of a route response.",
                                            "type": "string"
                                        },
                                        "RouteResponseKey": {
                                            "description": "Represents the route response key of a route response.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates a RouteResponse.",
                "operationId": "UpdateRouteResponse",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeResponseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ModelSelectionExpression": {
                                            "description": "Represents the model selection expression of a route response.",
                                            "type": "string"
                                        },
                                        "ResponseModels": {
                                            "description": "Represents the response models of a route response.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [1-128].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResponseParameters": {
                                            "description": "Represents the response parameters of a route response.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                        "properties": {
                                                            "Required": {
                                                                "description": "Whether or not the parameter is required.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "RouteResponseId": {
                                            "description": "Represents the identifier of a route response.",
                                            "type": "string"
                                        },
                                        "RouteResponseKey": {
                                            "description": "Represents the route response key of a route response.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ModelSelectionExpression": {
                                        "description": "The model selection expression for the route response.",
                                        "type": "string"
                                    },
                                    "ResponseModels": {
                                        "description": "The response models for the route response.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [1-128].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ResponseParameters": {
                                        "description": "The route response parameters.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                    "properties": {
                                                        "Required": {
                                                            "description": "Whether or not the parameter is required.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "RouteResponseKey": {
                                        "description": "The route response key.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/stages": {
            "get": {
                "description": "Gets the Stages for an API.",
                "operationId": "GetStages",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents an API stage.",
                                                "properties": {
                                                    "AccessLogSettings": {
                                                        "description": "Settings for logging access in this stage.",
                                                        "properties": {
                                                            "DestinationArn": {
                                                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                                                "type": "string"
                                                            },
                                                            "Format": {
                                                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "ClientCertificateId": {
                                                        "description": "The identifier of a client certificate for a Stage.",
                                                        "type": "string"
                                                    },
                                                    "CreatedDate": {
                                                        "description": "The timestamp when the stage was created.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "DefaultRouteSettings": {
                                                        "description": "Default route settings for the stage.",
                                                        "properties": {
                                                            "DataTraceEnabled": {
                                                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                                "type": "boolean"
                                                            },
                                                            "DetailedMetricsEnabled": {
                                                                "description": "Specifies whether detailed metrics are enabled.",
                                                                "type": "boolean"
                                                            },
                                                            "LoggingLevel": {
                                                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                                "enum": [
                                                                    "ERROR",
                                                                    "INFO",
                                                                    "false"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "ThrottlingBurstLimit": {
                                                                "description": "Specifies the throttling burst limit.",
                                                                "type": "integer"
                                                            },
                                                            "ThrottlingRateLimit": {
                                                                "description": "Specifies the throttling rate limit.",
                                                                "format": "double",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "DeploymentId": {
                                                        "description": "The identifier of the Deployment that the Stage is\n associated with.",
                                                        "type": "string"
                                                    },
                                                    "Description": {
                                                        "description": "The description of the stage.",
                                                        "type": "string"
                                                    },
                                                    "LastUpdatedDate": {
                                                        "description": "The timestamp when the stage was last updated.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "RouteSettings": {
                                                        "description": "Route settings for the stage.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "Represents a collection of route settings.",
                                                                    "properties": {
                                                                        "DataTraceEnabled": {
                                                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                                            "type": "boolean"
                                                                        },
                                                                        "DetailedMetricsEnabled": {
                                                                            "description": "Specifies whether detailed metrics are enabled.",
                                                                            "type": "boolean"
                                                                        },
                                                                        "LoggingLevel": {
                                                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                                            "enum": [
                                                                                "ERROR",
                                                                                "INFO",
                                                                                "false"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "ThrottlingBurstLimit": {
                                                                            "description": "Specifies the throttling burst limit.",
                                                                            "type": "integer"
                                                                        },
                                                                        "ThrottlingRateLimit": {
                                                                            "description": "Specifies the throttling rate limit.",
                                                                            "format": "double",
                                                                            "type": "number"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "StageName": {
                                                        "description": "The name of the stage.",
                                                        "type": "string"
                                                    },
                                                    "StageVariables": {
                                                        "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "description": "A string with a length between [0-2048].",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "StageName"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a Stage for an API.",
                "operationId": "CreateStage",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "AccessLogSettings": {
                                            "description": "Settings for logging access in this stage.",
                                            "properties": {
                                                "DestinationArn": {
                                                    "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                                    "type": "string"
                                                },
                                                "Format": {
                                                    "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ClientCertificateId": {
                                            "description": "The identifier of a client certificate for a Stage.",
                                            "type": "string"
                                        },
                                        "CreatedDate": {
                                            "description": "The timestamp when the stage was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "DefaultRouteSettings": {
                                            "description": "Default route settings for the stage.",
                                            "properties": {
                                                "DataTraceEnabled": {
                                                    "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                    "type": "boolean"
                                                },
                                                "DetailedMetricsEnabled": {
                                                    "description": "Specifies whether detailed metrics are enabled.",
                                                    "type": "boolean"
                                                },
                                                "LoggingLevel": {
                                                    "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                    "enum": [
                                                        "ERROR",
                                                        "INFO",
                                                        "false"
                                                    ],
                                                    "type": "string"
                                                },
                                                "ThrottlingBurstLimit": {
                                                    "description": "Specifies the throttling burst limit.",
                                                    "type": "integer"
                                                },
                                                "ThrottlingRateLimit": {
                                                    "description": "Specifies the throttling rate limit.",
                                                    "format": "double",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "DeploymentId": {
                                            "description": "The identifier of the Deployment that the Stage is\n associated with.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the stage.",
                                            "type": "string"
                                        },
                                        "LastUpdatedDate": {
                                            "description": "The timestamp when the stage was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "RouteSettings": {
                                            "description": "Route settings for the stage.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Represents a collection of route settings.",
                                                        "properties": {
                                                            "DataTraceEnabled": {
                                                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                                "type": "boolean"
                                                            },
                                                            "DetailedMetricsEnabled": {
                                                                "description": "Specifies whether detailed metrics are enabled.",
                                                                "type": "boolean"
                                                            },
                                                            "LoggingLevel": {
                                                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                                "enum": [
                                                                    "ERROR",
                                                                    "INFO",
                                                                    "false"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "ThrottlingBurstLimit": {
                                                                "description": "Specifies the throttling burst limit.",
                                                                "type": "integer"
                                                            },
                                                            "ThrottlingRateLimit": {
                                                                "description": "Specifies the throttling rate limit.",
                                                                "format": "double",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "StageName": {
                                            "description": "The name of the stage.",
                                            "type": "string"
                                        },
                                        "StageVariables": {
                                            "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-2048].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AccessLogSettings": {
                                        "description": "Settings for logging access in this stage.",
                                        "properties": {
                                            "DestinationArn": {
                                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                                "type": "string"
                                            },
                                            "Format": {
                                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ClientCertificateId": {
                                        "description": "The identifier of a client certificate for a Stage.",
                                        "type": "string"
                                    },
                                    "DefaultRouteSettings": {
                                        "description": "The default route settings for the stage.",
                                        "properties": {
                                            "DataTraceEnabled": {
                                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                "type": "boolean"
                                            },
                                            "DetailedMetricsEnabled": {
                                                "description": "Specifies whether detailed metrics are enabled.",
                                                "type": "boolean"
                                            },
                                            "LoggingLevel": {
                                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                "enum": [
                                                    "ERROR",
                                                    "INFO",
                                                    "false"
                                                ],
                                                "type": "string"
                                            },
                                            "ThrottlingBurstLimit": {
                                                "description": "Specifies the throttling burst limit.",
                                                "type": "integer"
                                            },
                                            "ThrottlingRateLimit": {
                                                "description": "Specifies the throttling rate limit.",
                                                "format": "double",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "DeploymentId": {
                                        "description": "The deployment identifier of the API stage.",
                                        "type": "string"
                                    },
                                    "Description": {
                                        "description": "The description for the API stage.",
                                        "type": "string"
                                    },
                                    "RouteSettings": {
                                        "description": "Route settings for the stage.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "Represents a collection of route settings.",
                                                    "properties": {
                                                        "DataTraceEnabled": {
                                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                            "type": "boolean"
                                                        },
                                                        "DetailedMetricsEnabled": {
                                                            "description": "Specifies whether detailed metrics are enabled.",
                                                            "type": "boolean"
                                                        },
                                                        "LoggingLevel": {
                                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                            "enum": [
                                                                "ERROR",
                                                                "INFO",
                                                                "false"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "ThrottlingBurstLimit": {
                                                            "description": "Specifies the throttling burst limit.",
                                                            "type": "integer"
                                                        },
                                                        "ThrottlingRateLimit": {
                                                            "description": "Specifies the throttling rate limit.",
                                                            "format": "double",
                                                            "type": "number"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "StageName": {
                                        "description": "The name of the stage.",
                                        "type": "string"
                                    },
                                    "StageVariables": {
                                        "description": "A map that defines the stage variables for a Stage. Variable names\n can have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [0-2048].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "StageName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/apis/{apiId}/stages/{stageName}": {
            "delete": {
                "description": "Deletes a Stage.",
                "operationId": "DeleteStage",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "stageName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets a Stage.",
                "operationId": "GetStage",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "stageName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "AccessLogSettings": {
                                            "description": "Settings for logging access in this stage.",
                                            "properties": {
                                                "DestinationArn": {
                                                    "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                                    "type": "string"
                                                },
                                                "Format": {
                                                    "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ClientCertificateId": {
                                            "description": "The identifier of a client certificate for a Stage.",
                                            "type": "string"
                                        },
                                        "CreatedDate": {
                                            "description": "The timestamp when the stage was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "DefaultRouteSettings": {
                                            "description": "Default route settings for the stage.",
                                            "properties": {
                                                "DataTraceEnabled": {
                                                    "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                    "type": "boolean"
                                                },
                                                "DetailedMetricsEnabled": {
                                                    "description": "Specifies whether detailed metrics are enabled.",
                                                    "type": "boolean"
                                                },
                                                "LoggingLevel": {
                                                    "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                    "enum": [
                                                        "ERROR",
                                                        "INFO",
                                                        "false"
                                                    ],
                                                    "type": "string"
                                                },
                                                "ThrottlingBurstLimit": {
                                                    "description": "Specifies the throttling burst limit.",
                                                    "type": "integer"
                                                },
                                                "ThrottlingRateLimit": {
                                                    "description": "Specifies the throttling rate limit.",
                                                    "format": "double",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "DeploymentId": {
                                            "description": "The identifier of the Deployment that the Stage is\n associated with.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the stage.",
                                            "type": "string"
                                        },
                                        "LastUpdatedDate": {
                                            "description": "The timestamp when the stage was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "RouteSettings": {
                                            "description": "Route settings for the stage.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Represents a collection of route settings.",
                                                        "properties": {
                                                            "DataTraceEnabled": {
                                                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                                "type": "boolean"
                                                            },
                                                            "DetailedMetricsEnabled": {
                                                                "description": "Specifies whether detailed metrics are enabled.",
                                                                "type": "boolean"
                                                            },
                                                            "LoggingLevel": {
                                                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                                "enum": [
                                                                    "ERROR",
                                                                    "INFO",
                                                                    "false"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "ThrottlingBurstLimit": {
                                                                "description": "Specifies the throttling burst limit.",
                                                                "type": "integer"
                                                            },
                                                            "ThrottlingRateLimit": {
                                                                "description": "Specifies the throttling rate limit.",
                                                                "format": "double",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "StageName": {
                                            "description": "The name of the stage.",
                                            "type": "string"
                                        },
                                        "StageVariables": {
                                            "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-2048].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates a Stage.",
                "operationId": "UpdateStage",
                "parameters": [
                    {
                        "in": "path",
                        "name": "apiId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "stageName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "AccessLogSettings": {
                                            "description": "Settings for logging access in this stage.",
                                            "properties": {
                                                "DestinationArn": {
                                                    "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                                    "type": "string"
                                                },
                                                "Format": {
                                                    "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ClientCertificateId": {
                                            "description": "The identifier of a client certificate for a Stage.",
                                            "type": "string"
                                        },
                                        "CreatedDate": {
                                            "description": "The timestamp when the stage was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "DefaultRouteSettings": {
                                            "description": "Default route settings for the stage.",
                                            "properties": {
                                                "DataTraceEnabled": {
                                                    "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                    "type": "boolean"
                                                },
                                                "DetailedMetricsEnabled": {
                                                    "description": "Specifies whether detailed metrics are enabled.",
                                                    "type": "boolean"
                                                },
                                                "LoggingLevel": {
                                                    "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                    "enum": [
                                                        "ERROR",
                                                        "INFO",
                                                        "false"
                                                    ],
                                                    "type": "string"
                                                },
                                                "ThrottlingBurstLimit": {
                                                    "description": "Specifies the throttling burst limit.",
                                                    "type": "integer"
                                                },
                                                "ThrottlingRateLimit": {
                                                    "description": "Specifies the throttling rate limit.",
                                                    "format": "double",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "DeploymentId": {
                                            "description": "The identifier of the Deployment that the Stage is\n associated with.",
                                            "type": "string"
                                        },
                                        "Description": {
                                            "description": "The description of the stage.",
                                            "type": "string"
                                        },
                                        "LastUpdatedDate": {
                                            "description": "The timestamp when the stage was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "RouteSettings": {
                                            "description": "Route settings for the stage.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "Represents a collection of route settings.",
                                                        "properties": {
                                                            "DataTraceEnabled": {
                                                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                                "type": "boolean"
                                                            },
                                                            "DetailedMetricsEnabled": {
                                                                "description": "Specifies whether detailed metrics are enabled.",
                                                                "type": "boolean"
                                                            },
                                                            "LoggingLevel": {
                                                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                                "enum": [
                                                                    "ERROR",
                                                                    "INFO",
                                                                    "false"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "ThrottlingBurstLimit": {
                                                                "description": "Specifies the throttling burst limit.",
                                                                "type": "integer"
                                                            },
                                                            "ThrottlingRateLimit": {
                                                                "description": "Specifies the throttling rate limit.",
                                                                "format": "double",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "StageName": {
                                            "description": "The name of the stage.",
                                            "type": "string"
                                        },
                                        "StageVariables": {
                                            "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "A string with a length between [0-2048].",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AccessLogSettings": {
                                        "description": "Settings for logging access in this stage.",
                                        "properties": {
                                            "DestinationArn": {
                                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                                "type": "string"
                                            },
                                            "Format": {
                                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ClientCertificateId": {
                                        "description": "The identifier of a client certificate for a Stage.",
                                        "type": "string"
                                    },
                                    "DefaultRouteSettings": {
                                        "description": "The default route settings for the stage.",
                                        "properties": {
                                            "DataTraceEnabled": {
                                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                "type": "boolean"
                                            },
                                            "DetailedMetricsEnabled": {
                                                "description": "Specifies whether detailed metrics are enabled.",
                                                "type": "boolean"
                                            },
                                            "LoggingLevel": {
                                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                "enum": [
                                                    "ERROR",
                                                    "INFO",
                                                    "false"
                                                ],
                                                "type": "string"
                                            },
                                            "ThrottlingBurstLimit": {
                                                "description": "Specifies the throttling burst limit.",
                                                "type": "integer"
                                            },
                                            "ThrottlingRateLimit": {
                                                "description": "Specifies the throttling rate limit.",
                                                "format": "double",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "DeploymentId": {
                                        "description": "The deployment identifier for the API stage.",
                                        "type": "string"
                                    },
                                    "Description": {
                                        "description": "The description for the API stage.",
                                        "type": "string"
                                    },
                                    "RouteSettings": {
                                        "description": "Route settings for the stage.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "Represents a collection of route settings.",
                                                    "properties": {
                                                        "DataTraceEnabled": {
                                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                            "type": "boolean"
                                                        },
                                                        "DetailedMetricsEnabled": {
                                                            "description": "Specifies whether detailed metrics are enabled.",
                                                            "type": "boolean"
                                                        },
                                                        "LoggingLevel": {
                                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                            "enum": [
                                                                "ERROR",
                                                                "INFO",
                                                                "false"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "ThrottlingBurstLimit": {
                                                            "description": "Specifies the throttling burst limit.",
                                                            "type": "integer"
                                                        },
                                                        "ThrottlingRateLimit": {
                                                            "description": "Specifies the throttling rate limit.",
                                                            "format": "double",
                                                            "type": "number"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "StageVariables": {
                                        "description": "A map that defines the stage variables for a Stage. Variable names\n can have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "A string with a length between [0-2048].",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/domainnames": {
            "get": {
                "description": "Gets the domain names for an AWS account.",
                "operationId": "GetDomainNames",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents a domain name.",
                                                "properties": {
                                                    "ApiMappingSelectionExpression": {
                                                        "description": "The API mapping selection expression.",
                                                        "type": "string"
                                                    },
                                                    "DomainName": {
                                                        "description": "The name of the DomainName resource.",
                                                        "type": "string"
                                                    },
                                                    "DomainNameConfigurations": {
                                                        "description": "The domain name configurations.",
                                                        "items": {
                                                            "description": "The domain name configuration.",
                                                            "properties": {
                                                                "ApiGatewayDomainName": {
                                                                    "description": "A domain name for the WebSocket API.",
                                                                    "type": "string"
                                                                },
                                                                "CertificateArn": {
                                                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                                                    "type": "string"
                                                                },
                                                                "CertificateName": {
                                                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                                                    "type": "string"
                                                                },
                                                                "CertificateUploadDate": {
                                                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "EndpointType": {
                                                                    "description": "The endpoint type.",
                                                                    "enum": [
                                                                        "REGIONAL",
                                                                        "EDGE"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "HostedZoneId": {
                                                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "DomainName"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a domain name.",
                "operationId": "CreateDomainName",
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiMappingSelectionExpression": {
                                            "description": "The API mapping selection expression.",
                                            "type": "string"
                                        },
                                        "DomainName": {
                                            "description": "The name of the DomainName resource.",
                                            "type": "string"
                                        },
                                        "DomainNameConfigurations": {
                                            "description": "The domain name configurations.",
                                            "items": {
                                                "description": "The domain name configuration.",
                                                "properties": {
                                                    "ApiGatewayDomainName": {
                                                        "description": "A domain name for the WebSocket API.",
                                                        "type": "string"
                                                    },
                                                    "CertificateArn": {
                                                        "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                                        "type": "string"
                                                    },
                                                    "CertificateName": {
                                                        "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                                        "type": "string"
                                                    },
                                                    "CertificateUploadDate": {
                                                        "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "EndpointType": {
                                                        "description": "The endpoint type.",
                                                        "enum": [
                                                            "REGIONAL",
                                                            "EDGE"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "HostedZoneId": {
                                                        "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "DomainName": {
                                        "description": "The domain name.",
                                        "type": "string"
                                    },
                                    "DomainNameConfigurations": {
                                        "description": "The domain name configurations.",
                                        "items": {
                                            "description": "The domain name configuration.",
                                            "properties": {
                                                "ApiGatewayDomainName": {
                                                    "description": "A domain name for the WebSocket API.",
                                                    "type": "string"
                                                },
                                                "CertificateArn": {
                                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                                    "type": "string"
                                                },
                                                "CertificateName": {
                                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                                    "type": "string"
                                                },
                                                "CertificateUploadDate": {
                                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "EndpointType": {
                                                    "description": "The endpoint type.",
                                                    "enum": [
                                                        "REGIONAL",
                                                        "EDGE"
                                                    ],
                                                    "type": "string"
                                                },
                                                "HostedZoneId": {
                                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "DomainName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/domainnames/{domainName}": {
            "delete": {
                "description": "Deletes a domain name.",
                "operationId": "DeleteDomainName",
                "parameters": [
                    {
                        "in": "path",
                        "name": "domainName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Gets a domain name.",
                "operationId": "GetDomainName",
                "parameters": [
                    {
                        "in": "path",
                        "name": "domainName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiMappingSelectionExpression": {
                                            "description": "The API mapping selection expression.",
                                            "type": "string"
                                        },
                                        "DomainName": {
                                            "description": "The name of the DomainName resource.",
                                            "type": "string"
                                        },
                                        "DomainNameConfigurations": {
                                            "description": "The domain name configurations.",
                                            "items": {
                                                "description": "The domain name configuration.",
                                                "properties": {
                                                    "ApiGatewayDomainName": {
                                                        "description": "A domain name for the WebSocket API.",
                                                        "type": "string"
                                                    },
                                                    "CertificateArn": {
                                                        "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                                        "type": "string"
                                                    },
                                                    "CertificateName": {
                                                        "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                                        "type": "string"
                                                    },
                                                    "CertificateUploadDate": {
                                                        "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "EndpointType": {
                                                        "description": "The endpoint type.",
                                                        "enum": [
                                                            "REGIONAL",
                                                            "EDGE"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "HostedZoneId": {
                                                        "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Updates a domain name.",
                "operationId": "UpdateDomainName",
                "parameters": [
                    {
                        "in": "path",
                        "name": "domainName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiMappingSelectionExpression": {
                                            "description": "The API mapping selection expression.",
                                            "type": "string"
                                        },
                                        "DomainName": {
                                            "description": "The name of the DomainName resource.",
                                            "type": "string"
                                        },
                                        "DomainNameConfigurations": {
                                            "description": "The domain name configurations.",
                                            "items": {
                                                "description": "The domain name configuration.",
                                                "properties": {
                                                    "ApiGatewayDomainName": {
                                                        "description": "A domain name for the WebSocket API.",
                                                        "type": "string"
                                                    },
                                                    "CertificateArn": {
                                                        "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                                        "type": "string"
                                                    },
                                                    "CertificateName": {
                                                        "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                                        "type": "string"
                                                    },
                                                    "CertificateUploadDate": {
                                                        "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "EndpointType": {
                                                        "description": "The endpoint type.",
                                                        "enum": [
                                                            "REGIONAL",
                                                            "EDGE"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "HostedZoneId": {
                                                        "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "DomainNameConfigurations": {
                                        "description": "The domain name configurations.",
                                        "items": {
                                            "description": "The domain name configuration.",
                                            "properties": {
                                                "ApiGatewayDomainName": {
                                                    "description": "A domain name for the WebSocket API.",
                                                    "type": "string"
                                                },
                                                "CertificateArn": {
                                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                                    "type": "string"
                                                },
                                                "CertificateName": {
                                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                                    "type": "string"
                                                },
                                                "CertificateUploadDate": {
                                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "EndpointType": {
                                                    "description": "The endpoint type.",
                                                    "enum": [
                                                        "REGIONAL",
                                                        "EDGE"
                                                    ],
                                                    "type": "string"
                                                },
                                                "HostedZoneId": {
                                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/domainnames/{domainName}/apimappings": {
            "get": {
                "description": "The API mappings.",
                "operationId": "GetApiMappings",
                "parameters": [
                    {
                        "in": "path",
                        "name": "domainName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The elements from this collection.",
                                            "items": {
                                                "description": "Represents an API mapping.",
                                                "properties": {
                                                    "ApiId": {
                                                        "description": "The API identifier.",
                                                        "type": "string"
                                                    },
                                                    "ApiMappingId": {
                                                        "description": "The API mapping identifier.",
                                                        "type": "string"
                                                    },
                                                    "ApiMappingKey": {
                                                        "description": "The API mapping key.",
                                                        "type": "string"
                                                    },
                                                    "Stage": {
                                                        "description": "The API stage.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Stage",
                                                    "ApiId"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates an API mapping.",
                "operationId": "CreateApiMapping",
                "parameters": [
                    {
                        "in": "path",
                        "name": "domainName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiId": {
                                            "description": "The API identifier.",
                                            "type": "string"
                                        },
                                        "ApiMappingId": {
                                            "description": "The API mapping identifier.",
                                            "type": "string"
                                        },
                                        "ApiMappingKey": {
                                            "description": "The API mapping key.",
                                            "type": "string"
                                        },
                                        "Stage": {
                                            "description": "The API stage.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ApiId": {
                                        "description": "The API identifier.",
                                        "type": "string"
                                    },
                                    "ApiMappingKey": {
                                        "description": "",
                                        "type": "string"
                                    },
                                    "Stage": {
                                        "description": "The API stage.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Stage",
                                    "ApiId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v2/domainnames/{domainName}/apimappings/{apiMappingId}": {
            "delete": {
                "description": "Deletes an API mapping.",
                "operationId": "DeleteApiMapping",
                "parameters": [
                    {
                        "in": "path",
                        "name": "domainName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "apiMappingId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "The API mapping.",
                "operationId": "GetApiMapping",
                "parameters": [
                    {
                        "in": "path",
                        "name": "domainName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "apiMappingId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiId": {
                                            "description": "The API identifier.",
                                            "type": "string"
                                        },
                                        "ApiMappingId": {
                                            "description": "The API mapping identifier.",
                                            "type": "string"
                                        },
                                        "ApiMappingKey": {
                                            "description": "The API mapping key.",
                                            "type": "string"
                                        },
                                        "Stage": {
                                            "description": "The API stage.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "The API mapping.",
                "operationId": "UpdateApiMapping",
                "parameters": [
                    {
                        "in": "path",
                        "name": "domainName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "apiMappingId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ApiId": {
                                            "description": "The API identifier.",
                                            "type": "string"
                                        },
                                        "ApiMappingId": {
                                            "description": "The API mapping identifier.",
                                            "type": "string"
                                        },
                                        "ApiMappingKey": {
                                            "description": "The API mapping key.",
                                            "type": "string"
                                        },
                                        "Stage": {
                                            "description": "The API stage.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ApiId": {
                                        "description": "The API identifier.",
                                        "type": "string"
                                    },
                                    "ApiMappingKey": {
                                        "description": "The API mapping key.",
                                        "type": "string"
                                    },
                                    "Stage": {
                                        "description": "The API stage.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ApiId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccessLogSettings": {
                "description": "Settings for logging access in a stage.",
                "properties": {
                    "DestinationArn": {
                        "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                        "type": "string"
                    },
                    "Format": {
                        "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Api": {
                "description": "Represents an API.",
                "properties": {
                    "ApiEndpoint": {
                        "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                        "type": "string"
                    },
                    "ApiId": {
                        "description": "The API ID.",
                        "type": "string"
                    },
                    "ApiKeySelectionExpression": {
                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                        "type": "string"
                    },
                    "CreatedDate": {
                        "description": "The timestamp when the API was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the API.",
                        "type": "string"
                    },
                    "DisableSchemaValidation": {
                        "description": "Avoid validating models when creating a deployment.",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "The name of the API.",
                        "type": "string"
                    },
                    "ProtocolType": {
                        "description": "The API protocol: Currently only WEBSOCKET is supported.",
                        "enum": [
                            "WEBSOCKET"
                        ],
                        "type": "string"
                    },
                    "RouteSelectionExpression": {
                        "description": "The route selection expression for the API.",
                        "type": "string"
                    },
                    "Version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "Warnings": {
                        "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "RouteSelectionExpression",
                    "ProtocolType",
                    "Name"
                ],
                "type": "object"
            },
            "ApiMapping": {
                "description": "Represents an API mapping.",
                "properties": {
                    "ApiId": {
                        "description": "The API identifier.",
                        "type": "string"
                    },
                    "ApiMappingId": {
                        "description": "The API mapping identifier.",
                        "type": "string"
                    },
                    "ApiMappingKey": {
                        "description": "The API mapping key.",
                        "type": "string"
                    },
                    "Stage": {
                        "description": "The API stage.",
                        "type": "string"
                    }
                },
                "required": [
                    "Stage",
                    "ApiId"
                ],
                "type": "object"
            },
            "Arn": {
                "description": "Represents an Amazon Resource Name (ARN).",
                "type": "string"
            },
            "AuthorizationScopes": {
                "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                "items": {
                    "description": "A string with a length between [1-64].",
                    "type": "string"
                },
                "type": "array"
            },
            "AuthorizationType": {
                "description": "The authorization type. Valid values are NONE for open access,\n AWS_IAM for using AWS IAM permissions, and CUSTOM for\n using a Lambda authorizer.",
                "enum": [
                    "NONE",
                    "AWS_IAM",
                    "CUSTOM"
                ],
                "type": "string"
            },
            "Authorizer": {
                "description": "Represents an authorizer.",
                "properties": {
                    "AuthorizerCredentialsArn": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The authorizer identifier.",
                        "type": "string"
                    },
                    "AuthorizerResultTtlInSeconds": {
                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    },
                    "AuthorizerType": {
                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                        "enum": [
                            "REQUEST"
                        ],
                        "type": "string"
                    },
                    "AuthorizerUri": {
                        "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                        "type": "string"
                    },
                    "IdentitySource": {
                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "IdentityValidationExpression": {
                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "ProviderArns": {
                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                        "items": {
                            "description": "Represents an Amazon Resource Name (ARN).",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "Name"
                ],
                "type": "object"
            },
            "AuthorizerType": {
                "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                "enum": [
                    "REQUEST"
                ],
                "type": "string"
            },
            "BadRequestException": {},
            "ConflictException": {},
            "ConnectionType": {
                "description": "Represents a connection type.",
                "enum": [
                    "INTERNET",
                    "VPC_LINK"
                ],
                "type": "string"
            },
            "ContentHandlingStrategy": {
                "description": "Specifies how to handle response payload content type conversions.",
                "enum": [
                    "CONVERT_TO_BINARY",
                    "CONVERT_TO_TEXT"
                ],
                "type": "string"
            },
            "CreateApiMappingRequest": {
                "properties": {
                    "ApiId": {
                        "description": "The API identifier.",
                        "type": "string"
                    },
                    "ApiMappingKey": {
                        "description": "",
                        "type": "string"
                    },
                    "Stage": {
                        "description": "The API stage.",
                        "type": "string"
                    }
                },
                "required": [
                    "Stage",
                    "ApiId"
                ],
                "type": "object"
            },
            "CreateApiMappingResponse": {
                "properties": {
                    "ApiId": {
                        "description": "The API identifier.",
                        "type": "string"
                    },
                    "ApiMappingId": {
                        "description": "The API mapping identifier.",
                        "type": "string"
                    },
                    "ApiMappingKey": {
                        "description": "The API mapping key.",
                        "type": "string"
                    },
                    "Stage": {
                        "description": "The API stage.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateApiRequest": {
                "properties": {
                    "ApiKeySelectionExpression": {
                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the API.",
                        "type": "string"
                    },
                    "DisableSchemaValidation": {
                        "description": "Avoid validating models when creating a deployment.",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "The name of the API.",
                        "type": "string"
                    },
                    "ProtocolType": {
                        "description": "The API protocol: Currently only WEBSOCKET is supported.",
                        "enum": [
                            "WEBSOCKET"
                        ],
                        "type": "string"
                    },
                    "RouteSelectionExpression": {
                        "description": "The route selection expression for the API.",
                        "type": "string"
                    },
                    "Version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    }
                },
                "required": [
                    "RouteSelectionExpression",
                    "ProtocolType",
                    "Name"
                ],
                "type": "object"
            },
            "CreateApiResponse": {
                "properties": {
                    "ApiEndpoint": {
                        "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                        "type": "string"
                    },
                    "ApiId": {
                        "description": "The API ID.",
                        "type": "string"
                    },
                    "ApiKeySelectionExpression": {
                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                        "type": "string"
                    },
                    "CreatedDate": {
                        "description": "The timestamp when the API was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the API.",
                        "type": "string"
                    },
                    "DisableSchemaValidation": {
                        "description": "Avoid validating models when creating a deployment.",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "The name of the API.",
                        "type": "string"
                    },
                    "ProtocolType": {
                        "description": "The API protocol: Currently only WEBSOCKET is supported.",
                        "enum": [
                            "WEBSOCKET"
                        ],
                        "type": "string"
                    },
                    "RouteSelectionExpression": {
                        "description": "The route selection expression for the API.",
                        "type": "string"
                    },
                    "Version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "Warnings": {
                        "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "CreateAuthorizerRequest": {
                "properties": {
                    "AuthorizerCredentialsArn": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                        "type": "string"
                    },
                    "AuthorizerResultTtlInSeconds": {
                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    },
                    "AuthorizerType": {
                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                        "enum": [
                            "REQUEST"
                        ],
                        "type": "string"
                    },
                    "AuthorizerUri": {
                        "description": "The authorizer's Uniform Resource Identifier (URI). For\n REQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                        "type": "string"
                    },
                    "IdentitySource": {
                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "IdentityValidationExpression": {
                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "ProviderArns": {
                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                        "items": {
                            "description": "Represents an Amazon Resource Name (ARN).",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "AuthorizerUri",
                    "AuthorizerType",
                    "IdentitySource",
                    "Name"
                ],
                "type": "object"
            },
            "CreateAuthorizerResponse": {
                "properties": {
                    "AuthorizerCredentialsArn": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The authorizer identifier.",
                        "type": "string"
                    },
                    "AuthorizerResultTtlInSeconds": {
                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    },
                    "AuthorizerType": {
                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                        "enum": [
                            "REQUEST"
                        ],
                        "type": "string"
                    },
                    "AuthorizerUri": {
                        "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                        "type": "string"
                    },
                    "IdentitySource": {
                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "IdentityValidationExpression": {
                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "ProviderArns": {
                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                        "items": {
                            "description": "Represents an Amazon Resource Name (ARN).",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "CreateDeploymentRequest": {
                "properties": {
                    "Description": {
                        "description": "The description for the deployment resource.",
                        "type": "string"
                    },
                    "StageName": {
                        "description": "The name of the Stage resource for the Deployment\n resource to create.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateDeploymentResponse": {
                "properties": {
                    "CreatedDate": {
                        "description": "The date and time when the Deployment resource was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DeploymentId": {
                        "description": "The identifier for the deployment.",
                        "type": "string"
                    },
                    "DeploymentStatus": {
                        "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                        "enum": [
                            "PENDING",
                            "FAILED",
                            "DEPLOYED"
                        ],
                        "type": "string"
                    },
                    "DeploymentStatusMessage": {
                        "description": "May contain additional feedback on the status of an API deployment.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description for the deployment.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateDomainNameRequest": {
                "properties": {
                    "DomainName": {
                        "description": "The domain name.",
                        "type": "string"
                    },
                    "DomainNameConfigurations": {
                        "description": "The domain name configurations.",
                        "items": {
                            "description": "The domain name configuration.",
                            "properties": {
                                "ApiGatewayDomainName": {
                                    "description": "A domain name for the WebSocket API.",
                                    "type": "string"
                                },
                                "CertificateArn": {
                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                    "type": "string"
                                },
                                "CertificateName": {
                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                    "type": "string"
                                },
                                "CertificateUploadDate": {
                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EndpointType": {
                                    "description": "The endpoint type.",
                                    "enum": [
                                        "REGIONAL",
                                        "EDGE"
                                    ],
                                    "type": "string"
                                },
                                "HostedZoneId": {
                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "DomainName"
                ],
                "type": "object"
            },
            "CreateDomainNameResponse": {
                "properties": {
                    "ApiMappingSelectionExpression": {
                        "description": "The API mapping selection expression.",
                        "type": "string"
                    },
                    "DomainName": {
                        "description": "The name of the DomainName resource.",
                        "type": "string"
                    },
                    "DomainNameConfigurations": {
                        "description": "The domain name configurations.",
                        "items": {
                            "description": "The domain name configuration.",
                            "properties": {
                                "ApiGatewayDomainName": {
                                    "description": "A domain name for the WebSocket API.",
                                    "type": "string"
                                },
                                "CertificateArn": {
                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                    "type": "string"
                                },
                                "CertificateName": {
                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                    "type": "string"
                                },
                                "CertificateUploadDate": {
                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EndpointType": {
                                    "description": "The endpoint type.",
                                    "enum": [
                                        "REGIONAL",
                                        "EDGE"
                                    ],
                                    "type": "string"
                                },
                                "HostedZoneId": {
                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "CreateIntegrationRequest": {
                "properties": {
                    "ConnectionId": {
                        "description": "The connection ID.",
                        "type": "string"
                    },
                    "ConnectionType": {
                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ],
                        "type": "string"
                    },
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "CredentialsArn": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the integration.",
                        "type": "string"
                    },
                    "IntegrationMethod": {
                        "description": "Specifies the integration's HTTP method type.",
                        "type": "string"
                    },
                    "IntegrationType": {
                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                        "enum": [
                            "AWS",
                            "HTTP",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ],
                        "type": "string"
                    },
                    "IntegrationUri": {
                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                        "type": "string"
                    },
                    "PassthroughBehavior": {
                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                        "enum": [
                            "WHEN_NO_MATCH",
                            "NEVER",
                            "WHEN_NO_TEMPLATES"
                        ],
                        "type": "string"
                    },
                    "RequestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expression for the integration.",
                        "type": "string"
                    },
                    "TimeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    }
                },
                "required": [
                    "IntegrationType"
                ],
                "type": "object"
            },
            "CreateIntegrationResponse": {
                "properties": {
                    "ConnectionId": {
                        "description": "The connection ID.",
                        "type": "string"
                    },
                    "ConnectionType": {
                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ],
                        "type": "string"
                    },
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "CredentialsArn": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Represents the description of an integration.",
                        "type": "string"
                    },
                    "IntegrationId": {
                        "description": "Represents the identifier of an integration.",
                        "type": "string"
                    },
                    "IntegrationMethod": {
                        "description": "Specifies the integration's HTTP method type.",
                        "type": "string"
                    },
                    "IntegrationResponseSelectionExpression": {
                        "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                        "type": "string"
                    },
                    "IntegrationType": {
                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                        "enum": [
                            "AWS",
                            "HTTP",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ],
                        "type": "string"
                    },
                    "IntegrationUri": {
                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                        "type": "string"
                    },
                    "PassthroughBehavior": {
                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                        "enum": [
                            "WHEN_NO_MATCH",
                            "NEVER",
                            "WHEN_NO_TEMPLATES"
                        ],
                        "type": "string"
                    },
                    "RequestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expression for the integration.",
                        "type": "string"
                    },
                    "TimeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "CreateIntegrationResponseRequest": {
                "properties": {
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "IntegrationResponseKey": {
                        "description": "The integration response key.",
                        "type": "string"
                    },
                    "ResponseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name},\n where {name} is a valid and unique header name. The mapped non-static\n value must match the pattern of integration.response.header.{name} or\n integration.response.body.{JSON-expression}, where\n {name} is a valid and unique response header name and\n {JSON-expression} is a valid JSON expression without the $\n prefix.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseTemplates": {
                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expression for the integration response.",
                        "type": "string"
                    }
                },
                "required": [
                    "IntegrationResponseKey"
                ],
                "type": "object"
            },
            "CreateIntegrationResponseResponse": {
                "properties": {
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "IntegrationResponseId": {
                        "description": "The integration response ID.",
                        "type": "string"
                    },
                    "IntegrationResponseKey": {
                        "description": "The integration response key.",
                        "type": "string"
                    },
                    "ResponseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseTemplates": {
                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expressions for the integration response.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateModelRequest": {
                "properties": {
                    "ContentType": {
                        "description": "The content-type for the model, for example, \"application/json\".",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the model. Must be alphanumeric.",
                        "type": "string"
                    },
                    "Schema": {
                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                        "type": "string"
                    }
                },
                "required": [
                    "Schema",
                    "Name"
                ],
                "type": "object"
            },
            "CreateModelResponse": {
                "properties": {
                    "ContentType": {
                        "description": "The content-type for the model, for example, \"application/json\".",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "ModelId": {
                        "description": "The model identifier.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the model. Must be alphanumeric.",
                        "type": "string"
                    },
                    "Schema": {
                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateRouteRequest": {
                "properties": {
                    "ApiKeyRequired": {
                        "description": "Specifies whether an API key is required for the route.",
                        "type": "boolean"
                    },
                    "AuthorizationScopes": {
                        "description": "The authorization scopes supported by this\n route.",
                        "items": {
                            "description": "A string with a length between [1-64].",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "AuthorizationType": {
                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer.",
                        "enum": [
                            "NONE",
                            "AWS_IAM",
                            "CUSTOM"
                        ],
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                        "type": "string"
                    },
                    "ModelSelectionExpression": {
                        "description": "The model selection expression for the route.",
                        "type": "string"
                    },
                    "OperationName": {
                        "description": "The operation name for the route.",
                        "type": "string"
                    },
                    "RequestModels": {
                        "description": "The request models for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestParameters": {
                        "description": "The request parameters for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteKey": {
                        "description": "The route key for the route.",
                        "type": "string"
                    },
                    "RouteResponseSelectionExpression": {
                        "description": "The route response selection expression for the route.",
                        "type": "string"
                    },
                    "Target": {
                        "description": "The target for the route.",
                        "type": "string"
                    }
                },
                "required": [
                    "RouteKey"
                ],
                "type": "object"
            },
            "CreateRouteResponse": {
                "properties": {
                    "ApiKeyRequired": {
                        "description": "Specifies whether an API key is required for this route.",
                        "type": "boolean"
                    },
                    "AuthorizationScopes": {
                        "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                        "items": {
                            "description": "A string with a length between [1-64].",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "AuthorizationType": {
                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                        "enum": [
                            "NONE",
                            "AWS_IAM",
                            "CUSTOM"
                        ],
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                        "type": "string"
                    },
                    "ModelSelectionExpression": {
                        "description": "The model selection expression for the route.",
                        "type": "string"
                    },
                    "OperationName": {
                        "description": "The operation name for the route.",
                        "type": "string"
                    },
                    "RequestModels": {
                        "description": "The request models for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestParameters": {
                        "description": "The request parameters for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteId": {
                        "description": "The route ID.",
                        "type": "string"
                    },
                    "RouteKey": {
                        "description": "The route key for the route.",
                        "type": "string"
                    },
                    "RouteResponseSelectionExpression": {
                        "description": "The route response selection expression for the route.",
                        "type": "string"
                    },
                    "Target": {
                        "description": "The target for the route.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateRouteResponseRequest": {
                "properties": {
                    "ModelSelectionExpression": {
                        "description": "The model selection expression for the route response.",
                        "type": "string"
                    },
                    "ResponseModels": {
                        "description": "The response models for the route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseParameters": {
                        "description": "The route response parameters.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteResponseKey": {
                        "description": "The route response key.",
                        "type": "string"
                    }
                },
                "required": [
                    "RouteResponseKey"
                ],
                "type": "object"
            },
            "CreateRouteResponseResponse": {
                "properties": {
                    "ModelSelectionExpression": {
                        "description": "Represents the model selection expression of a route response.",
                        "type": "string"
                    },
                    "ResponseModels": {
                        "description": "Represents the response models of a route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseParameters": {
                        "description": "Represents the response parameters of a route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteResponseId": {
                        "description": "Represents the identifier of a route response.",
                        "type": "string"
                    },
                    "RouteResponseKey": {
                        "description": "Represents the route response key of a route response.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateStageRequest": {
                "properties": {
                    "AccessLogSettings": {
                        "description": "Settings for logging access in this stage.",
                        "properties": {
                            "DestinationArn": {
                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                "type": "string"
                            },
                            "Format": {
                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientCertificateId": {
                        "description": "The identifier of a client certificate for a Stage.",
                        "type": "string"
                    },
                    "DefaultRouteSettings": {
                        "description": "The default route settings for the stage.",
                        "properties": {
                            "DataTraceEnabled": {
                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                "type": "boolean"
                            },
                            "DetailedMetricsEnabled": {
                                "description": "Specifies whether detailed metrics are enabled.",
                                "type": "boolean"
                            },
                            "LoggingLevel": {
                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                "enum": [
                                    "ERROR",
                                    "INFO",
                                    "false"
                                ],
                                "type": "string"
                            },
                            "ThrottlingBurstLimit": {
                                "description": "Specifies the throttling burst limit.",
                                "type": "integer"
                            },
                            "ThrottlingRateLimit": {
                                "description": "Specifies the throttling rate limit.",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "DeploymentId": {
                        "description": "The deployment identifier of the API stage.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description for the API stage.",
                        "type": "string"
                    },
                    "RouteSettings": {
                        "description": "Route settings for the stage.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Represents a collection of route settings.",
                                    "properties": {
                                        "DataTraceEnabled": {
                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                            "type": "boolean"
                                        },
                                        "DetailedMetricsEnabled": {
                                            "description": "Specifies whether detailed metrics are enabled.",
                                            "type": "boolean"
                                        },
                                        "LoggingLevel": {
                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                            "enum": [
                                                "ERROR",
                                                "INFO",
                                                "false"
                                            ],
                                            "type": "string"
                                        },
                                        "ThrottlingBurstLimit": {
                                            "description": "Specifies the throttling burst limit.",
                                            "type": "integer"
                                        },
                                        "ThrottlingRateLimit": {
                                            "description": "Specifies the throttling rate limit.",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "StageName": {
                        "description": "The name of the stage.",
                        "type": "string"
                    },
                    "StageVariables": {
                        "description": "A map that defines the stage variables for a Stage. Variable names\n can have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-2048].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "StageName"
                ],
                "type": "object"
            },
            "CreateStageResponse": {
                "properties": {
                    "AccessLogSettings": {
                        "description": "Settings for logging access in this stage.",
                        "properties": {
                            "DestinationArn": {
                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                "type": "string"
                            },
                            "Format": {
                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientCertificateId": {
                        "description": "The identifier of a client certificate for a Stage.",
                        "type": "string"
                    },
                    "CreatedDate": {
                        "description": "The timestamp when the stage was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DefaultRouteSettings": {
                        "description": "Default route settings for the stage.",
                        "properties": {
                            "DataTraceEnabled": {
                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                "type": "boolean"
                            },
                            "DetailedMetricsEnabled": {
                                "description": "Specifies whether detailed metrics are enabled.",
                                "type": "boolean"
                            },
                            "LoggingLevel": {
                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                "enum": [
                                    "ERROR",
                                    "INFO",
                                    "false"
                                ],
                                "type": "string"
                            },
                            "ThrottlingBurstLimit": {
                                "description": "Specifies the throttling burst limit.",
                                "type": "integer"
                            },
                            "ThrottlingRateLimit": {
                                "description": "Specifies the throttling rate limit.",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "DeploymentId": {
                        "description": "The identifier of the Deployment that the Stage is\n associated with.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the stage.",
                        "type": "string"
                    },
                    "LastUpdatedDate": {
                        "description": "The timestamp when the stage was last updated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "RouteSettings": {
                        "description": "Route settings for the stage.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Represents a collection of route settings.",
                                    "properties": {
                                        "DataTraceEnabled": {
                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                            "type": "boolean"
                                        },
                                        "DetailedMetricsEnabled": {
                                            "description": "Specifies whether detailed metrics are enabled.",
                                            "type": "boolean"
                                        },
                                        "LoggingLevel": {
                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                            "enum": [
                                                "ERROR",
                                                "INFO",
                                                "false"
                                            ],
                                            "type": "string"
                                        },
                                        "ThrottlingBurstLimit": {
                                            "description": "Specifies the throttling burst limit.",
                                            "type": "integer"
                                        },
                                        "ThrottlingRateLimit": {
                                            "description": "Specifies the throttling rate limit.",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "StageName": {
                        "description": "The name of the stage.",
                        "type": "string"
                    },
                    "StageVariables": {
                        "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-2048].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DeleteApiMappingRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteApiRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteAuthorizerRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteDeploymentRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteDomainNameRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteIntegrationRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteIntegrationResponseRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteModelRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteRouteRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteRouteResponseRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteStageRequest": {
                "properties": {},
                "type": "object"
            },
            "Deployment": {
                "description": "An immutable representation of an API that can be called by users. A\n Deployment must be associated with a Stage for it to be\n callable over the internet.",
                "properties": {
                    "CreatedDate": {
                        "description": "The date and time when the Deployment resource was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DeploymentId": {
                        "description": "The identifier for the deployment.",
                        "type": "string"
                    },
                    "DeploymentStatus": {
                        "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                        "enum": [
                            "PENDING",
                            "FAILED",
                            "DEPLOYED"
                        ],
                        "type": "string"
                    },
                    "DeploymentStatusMessage": {
                        "description": "May contain additional feedback on the status of an API deployment.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description for the deployment.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DeploymentStatus": {
                "description": "Represents a deployment status.",
                "enum": [
                    "PENDING",
                    "FAILED",
                    "DEPLOYED"
                ],
                "type": "string"
            },
            "DomainName": {
                "description": "Represents a domain name.",
                "properties": {
                    "ApiMappingSelectionExpression": {
                        "description": "The API mapping selection expression.",
                        "type": "string"
                    },
                    "DomainName": {
                        "description": "The name of the DomainName resource.",
                        "type": "string"
                    },
                    "DomainNameConfigurations": {
                        "description": "The domain name configurations.",
                        "items": {
                            "description": "The domain name configuration.",
                            "properties": {
                                "ApiGatewayDomainName": {
                                    "description": "A domain name for the WebSocket API.",
                                    "type": "string"
                                },
                                "CertificateArn": {
                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                    "type": "string"
                                },
                                "CertificateName": {
                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                    "type": "string"
                                },
                                "CertificateUploadDate": {
                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EndpointType": {
                                    "description": "The endpoint type.",
                                    "enum": [
                                        "REGIONAL",
                                        "EDGE"
                                    ],
                                    "type": "string"
                                },
                                "HostedZoneId": {
                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "DomainName"
                ],
                "type": "object"
            },
            "DomainNameConfiguration": {
                "description": "The domain name configuration.",
                "properties": {
                    "ApiGatewayDomainName": {
                        "description": "A domain name for the WebSocket API.",
                        "type": "string"
                    },
                    "CertificateArn": {
                        "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "CertificateName": {
                        "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                        "type": "string"
                    },
                    "CertificateUploadDate": {
                        "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "EndpointType": {
                        "description": "The endpoint type.",
                        "enum": [
                            "REGIONAL",
                            "EDGE"
                        ],
                        "type": "string"
                    },
                    "HostedZoneId": {
                        "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DomainNameConfigurations": {
                "description": "The domain name configurations.",
                "items": {
                    "description": "The domain name configuration.",
                    "properties": {
                        "ApiGatewayDomainName": {
                            "description": "A domain name for the WebSocket API.",
                            "type": "string"
                        },
                        "CertificateArn": {
                            "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                            "type": "string"
                        },
                        "CertificateName": {
                            "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                            "type": "string"
                        },
                        "CertificateUploadDate": {
                            "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "EndpointType": {
                            "description": "The endpoint type.",
                            "enum": [
                                "REGIONAL",
                                "EDGE"
                            ],
                            "type": "string"
                        },
                        "HostedZoneId": {
                            "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "EndpointType": {
                "description": "Represents an endpoint type.",
                "enum": [
                    "REGIONAL",
                    "EDGE"
                ],
                "type": "string"
            },
            "GetApiMappingRequest": {
                "properties": {},
                "type": "object"
            },
            "GetApiMappingResponse": {
                "properties": {
                    "ApiId": {
                        "description": "The API identifier.",
                        "type": "string"
                    },
                    "ApiMappingId": {
                        "description": "The API mapping identifier.",
                        "type": "string"
                    },
                    "ApiMappingKey": {
                        "description": "The API mapping key.",
                        "type": "string"
                    },
                    "Stage": {
                        "description": "The API stage.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetApiMappingsRequest": {
                "properties": {},
                "type": "object"
            },
            "GetApiMappingsResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents an API mapping.",
                            "properties": {
                                "ApiId": {
                                    "description": "The API identifier.",
                                    "type": "string"
                                },
                                "ApiMappingId": {
                                    "description": "The API mapping identifier.",
                                    "type": "string"
                                },
                                "ApiMappingKey": {
                                    "description": "The API mapping key.",
                                    "type": "string"
                                },
                                "Stage": {
                                    "description": "The API stage.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Stage",
                                "ApiId"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetApiRequest": {
                "properties": {},
                "type": "object"
            },
            "GetApiResponse": {
                "properties": {
                    "ApiEndpoint": {
                        "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                        "type": "string"
                    },
                    "ApiId": {
                        "description": "The API ID.",
                        "type": "string"
                    },
                    "ApiKeySelectionExpression": {
                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                        "type": "string"
                    },
                    "CreatedDate": {
                        "description": "The timestamp when the API was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the API.",
                        "type": "string"
                    },
                    "DisableSchemaValidation": {
                        "description": "Avoid validating models when creating a deployment.",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "The name of the API.",
                        "type": "string"
                    },
                    "ProtocolType": {
                        "description": "The API protocol: Currently only WEBSOCKET is supported.",
                        "enum": [
                            "WEBSOCKET"
                        ],
                        "type": "string"
                    },
                    "RouteSelectionExpression": {
                        "description": "The route selection expression for the API.",
                        "type": "string"
                    },
                    "Version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "Warnings": {
                        "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GetApisRequest": {
                "properties": {},
                "type": "object"
            },
            "GetApisResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents an API.",
                            "properties": {
                                "ApiEndpoint": {
                                    "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                                    "type": "string"
                                },
                                "ApiId": {
                                    "description": "The API ID.",
                                    "type": "string"
                                },
                                "ApiKeySelectionExpression": {
                                    "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                                    "type": "string"
                                },
                                "CreatedDate": {
                                    "description": "The timestamp when the API was created.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Description": {
                                    "description": "The description of the API.",
                                    "type": "string"
                                },
                                "DisableSchemaValidation": {
                                    "description": "Avoid validating models when creating a deployment.",
                                    "type": "boolean"
                                },
                                "Name": {
                                    "description": "The name of the API.",
                                    "type": "string"
                                },
                                "ProtocolType": {
                                    "description": "The API protocol: Currently only WEBSOCKET is supported.",
                                    "enum": [
                                        "WEBSOCKET"
                                    ],
                                    "type": "string"
                                },
                                "RouteSelectionExpression": {
                                    "description": "The route selection expression for the API.",
                                    "type": "string"
                                },
                                "Version": {
                                    "description": "A version identifier for the API.",
                                    "type": "string"
                                },
                                "Warnings": {
                                    "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "RouteSelectionExpression",
                                "ProtocolType",
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetAuthorizerRequest": {
                "properties": {},
                "type": "object"
            },
            "GetAuthorizerResponse": {
                "properties": {
                    "AuthorizerCredentialsArn": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The authorizer identifier.",
                        "type": "string"
                    },
                    "AuthorizerResultTtlInSeconds": {
                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    },
                    "AuthorizerType": {
                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                        "enum": [
                            "REQUEST"
                        ],
                        "type": "string"
                    },
                    "AuthorizerUri": {
                        "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                        "type": "string"
                    },
                    "IdentitySource": {
                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "IdentityValidationExpression": {
                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "ProviderArns": {
                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                        "items": {
                            "description": "Represents an Amazon Resource Name (ARN).",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GetAuthorizersRequest": {
                "properties": {},
                "type": "object"
            },
            "GetAuthorizersResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents an authorizer.",
                            "properties": {
                                "AuthorizerCredentialsArn": {
                                    "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                                    "type": "string"
                                },
                                "AuthorizerId": {
                                    "description": "The authorizer identifier.",
                                    "type": "string"
                                },
                                "AuthorizerResultTtlInSeconds": {
                                    "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                                    "maximum": 2147483647,
                                    "minimum": -2147483648,
                                    "type": "integer"
                                },
                                "AuthorizerType": {
                                    "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                                    "enum": [
                                        "REQUEST"
                                    ],
                                    "type": "string"
                                },
                                "AuthorizerUri": {
                                    "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                                    "type": "string"
                                },
                                "IdentitySource": {
                                    "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "IdentityValidationExpression": {
                                    "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                                    "type": "string"
                                },
                                "Name": {
                                    "description": "The name of the authorizer.",
                                    "type": "string"
                                },
                                "ProviderArns": {
                                    "description": "For\n REQUEST authorizer, this is not\n defined.",
                                    "items": {
                                        "description": "Represents an Amazon Resource Name (ARN).",
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetDeploymentRequest": {
                "properties": {},
                "type": "object"
            },
            "GetDeploymentResponse": {
                "properties": {
                    "CreatedDate": {
                        "description": "The date and time when the Deployment resource was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DeploymentId": {
                        "description": "The identifier for the deployment.",
                        "type": "string"
                    },
                    "DeploymentStatus": {
                        "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                        "enum": [
                            "PENDING",
                            "FAILED",
                            "DEPLOYED"
                        ],
                        "type": "string"
                    },
                    "DeploymentStatusMessage": {
                        "description": "May contain additional feedback on the status of an API deployment.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description for the deployment.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetDeploymentsRequest": {
                "properties": {},
                "type": "object"
            },
            "GetDeploymentsResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "An immutable representation of an API that can be called by users. A\n Deployment must be associated with a Stage for it to be\n callable over the internet.",
                            "properties": {
                                "CreatedDate": {
                                    "description": "The date and time when the Deployment resource was created.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "DeploymentId": {
                                    "description": "The identifier for the deployment.",
                                    "type": "string"
                                },
                                "DeploymentStatus": {
                                    "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                                    "enum": [
                                        "PENDING",
                                        "FAILED",
                                        "DEPLOYED"
                                    ],
                                    "type": "string"
                                },
                                "DeploymentStatusMessage": {
                                    "description": "May contain additional feedback on the status of an API deployment.",
                                    "type": "string"
                                },
                                "Description": {
                                    "description": "The description for the deployment.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetDomainNameRequest": {
                "properties": {},
                "type": "object"
            },
            "GetDomainNameResponse": {
                "properties": {
                    "ApiMappingSelectionExpression": {
                        "description": "The API mapping selection expression.",
                        "type": "string"
                    },
                    "DomainName": {
                        "description": "The name of the DomainName resource.",
                        "type": "string"
                    },
                    "DomainNameConfigurations": {
                        "description": "The domain name configurations.",
                        "items": {
                            "description": "The domain name configuration.",
                            "properties": {
                                "ApiGatewayDomainName": {
                                    "description": "A domain name for the WebSocket API.",
                                    "type": "string"
                                },
                                "CertificateArn": {
                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                    "type": "string"
                                },
                                "CertificateName": {
                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                    "type": "string"
                                },
                                "CertificateUploadDate": {
                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EndpointType": {
                                    "description": "The endpoint type.",
                                    "enum": [
                                        "REGIONAL",
                                        "EDGE"
                                    ],
                                    "type": "string"
                                },
                                "HostedZoneId": {
                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GetDomainNamesRequest": {
                "properties": {},
                "type": "object"
            },
            "GetDomainNamesResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents a domain name.",
                            "properties": {
                                "ApiMappingSelectionExpression": {
                                    "description": "The API mapping selection expression.",
                                    "type": "string"
                                },
                                "DomainName": {
                                    "description": "The name of the DomainName resource.",
                                    "type": "string"
                                },
                                "DomainNameConfigurations": {
                                    "description": "The domain name configurations.",
                                    "items": {
                                        "description": "The domain name configuration.",
                                        "properties": {
                                            "ApiGatewayDomainName": {
                                                "description": "A domain name for the WebSocket API.",
                                                "type": "string"
                                            },
                                            "CertificateArn": {
                                                "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                                "type": "string"
                                            },
                                            "CertificateName": {
                                                "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                                "type": "string"
                                            },
                                            "CertificateUploadDate": {
                                                "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "EndpointType": {
                                                "description": "The endpoint type.",
                                                "enum": [
                                                    "REGIONAL",
                                                    "EDGE"
                                                ],
                                                "type": "string"
                                            },
                                            "HostedZoneId": {
                                                "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "DomainName"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetIntegrationRequest": {
                "properties": {},
                "type": "object"
            },
            "GetIntegrationResponse": {
                "properties": {
                    "ConnectionId": {
                        "description": "The connection ID.",
                        "type": "string"
                    },
                    "ConnectionType": {
                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ],
                        "type": "string"
                    },
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "CredentialsArn": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Represents the description of an integration.",
                        "type": "string"
                    },
                    "IntegrationId": {
                        "description": "Represents the identifier of an integration.",
                        "type": "string"
                    },
                    "IntegrationMethod": {
                        "description": "Specifies the integration's HTTP method type.",
                        "type": "string"
                    },
                    "IntegrationResponseSelectionExpression": {
                        "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                        "type": "string"
                    },
                    "IntegrationType": {
                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                        "enum": [
                            "AWS",
                            "HTTP",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ],
                        "type": "string"
                    },
                    "IntegrationUri": {
                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                        "type": "string"
                    },
                    "PassthroughBehavior": {
                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                        "enum": [
                            "WHEN_NO_MATCH",
                            "NEVER",
                            "WHEN_NO_TEMPLATES"
                        ],
                        "type": "string"
                    },
                    "RequestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expression for the integration.",
                        "type": "string"
                    },
                    "TimeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "GetIntegrationResponseRequest": {
                "properties": {},
                "type": "object"
            },
            "GetIntegrationResponseResponse": {
                "properties": {
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "IntegrationResponseId": {
                        "description": "The integration response ID.",
                        "type": "string"
                    },
                    "IntegrationResponseKey": {
                        "description": "The integration response key.",
                        "type": "string"
                    },
                    "ResponseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseTemplates": {
                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expressions for the integration response.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetIntegrationResponsesRequest": {
                "properties": {},
                "type": "object"
            },
            "GetIntegrationResponsesResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents an integration response.",
                            "properties": {
                                "ContentHandlingStrategy": {
                                    "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                    "enum": [
                                        "CONVERT_TO_BINARY",
                                        "CONVERT_TO_TEXT"
                                    ],
                                    "type": "string"
                                },
                                "IntegrationResponseId": {
                                    "description": "The integration response ID.",
                                    "type": "string"
                                },
                                "IntegrationResponseKey": {
                                    "description": "The integration response key.",
                                    "type": "string"
                                },
                                "ResponseParameters": {
                                    "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "A string with a length between [1-512].",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "ResponseTemplates": {
                                    "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "A string with a length between [0-32768].",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "TemplateSelectionExpression": {
                                    "description": "The template selection expressions for the integration response.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "IntegrationResponseKey"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetIntegrationsRequest": {
                "properties": {},
                "type": "object"
            },
            "GetIntegrationsResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents an integration.",
                            "properties": {
                                "ConnectionId": {
                                    "description": "The connection ID.",
                                    "type": "string"
                                },
                                "ConnectionType": {
                                    "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                                    "enum": [
                                        "INTERNET",
                                        "VPC_LINK"
                                    ],
                                    "type": "string"
                                },
                                "ContentHandlingStrategy": {
                                    "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                                    "enum": [
                                        "CONVERT_TO_BINARY",
                                        "CONVERT_TO_TEXT"
                                    ],
                                    "type": "string"
                                },
                                "CredentialsArn": {
                                    "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                                    "type": "string"
                                },
                                "Description": {
                                    "description": "Represents the description of an integration.",
                                    "type": "string"
                                },
                                "IntegrationId": {
                                    "description": "Represents the identifier of an integration.",
                                    "type": "string"
                                },
                                "IntegrationMethod": {
                                    "description": "Specifies the integration's HTTP method type.",
                                    "type": "string"
                                },
                                "IntegrationResponseSelectionExpression": {
                                    "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                                    "type": "string"
                                },
                                "IntegrationType": {
                                    "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                                    "enum": [
                                        "AWS",
                                        "HTTP",
                                        "MOCK",
                                        "HTTP_PROXY",
                                        "AWS_PROXY"
                                    ],
                                    "type": "string"
                                },
                                "IntegrationUri": {
                                    "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                                    "type": "string"
                                },
                                "PassthroughBehavior": {
                                    "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                                    "enum": [
                                        "WHEN_NO_MATCH",
                                        "NEVER",
                                        "WHEN_NO_TEMPLATES"
                                    ],
                                    "type": "string"
                                },
                                "RequestParameters": {
                                    "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "A string with a length between [1-512].",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "RequestTemplates": {
                                    "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "A string with a length between [0-32768].",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "TemplateSelectionExpression": {
                                    "description": "The template selection expression for the integration.",
                                    "type": "string"
                                },
                                "TimeoutInMillis": {
                                    "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                                    "maximum": 2147483647,
                                    "minimum": -2147483648,
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetModelRequest": {
                "properties": {},
                "type": "object"
            },
            "GetModelResponse": {
                "properties": {
                    "ContentType": {
                        "description": "The content-type for the model, for example, \"application/json\".",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "ModelId": {
                        "description": "The model identifier.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the model. Must be alphanumeric.",
                        "type": "string"
                    },
                    "Schema": {
                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetModelTemplateRequest": {
                "properties": {},
                "type": "object"
            },
            "GetModelTemplateResponse": {
                "properties": {
                    "Value": {
                        "description": "The template value.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetModelsRequest": {
                "properties": {},
                "type": "object"
            },
            "GetModelsResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents a data model for an API. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html\">Create Models and Mapping Templates for Request and Response\n Mappings</a>.",
                            "properties": {
                                "ContentType": {
                                    "description": "The content-type for the model, for example, \"application/json\".",
                                    "type": "string"
                                },
                                "Description": {
                                    "description": "The description of the model.",
                                    "type": "string"
                                },
                                "ModelId": {
                                    "description": "The model identifier.",
                                    "type": "string"
                                },
                                "Name": {
                                    "description": "The name of the model. Must be alphanumeric.",
                                    "type": "string"
                                },
                                "Schema": {
                                    "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetRouteRequest": {
                "properties": {},
                "type": "object"
            },
            "GetRouteResponse": {
                "properties": {
                    "ApiKeyRequired": {
                        "description": "Specifies whether an API key is required for this route.",
                        "type": "boolean"
                    },
                    "AuthorizationScopes": {
                        "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                        "items": {
                            "description": "A string with a length between [1-64].",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "AuthorizationType": {
                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                        "enum": [
                            "NONE",
                            "AWS_IAM",
                            "CUSTOM"
                        ],
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                        "type": "string"
                    },
                    "ModelSelectionExpression": {
                        "description": "The model selection expression for the route.",
                        "type": "string"
                    },
                    "OperationName": {
                        "description": "The operation name for the route.",
                        "type": "string"
                    },
                    "RequestModels": {
                        "description": "The request models for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestParameters": {
                        "description": "The request parameters for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteId": {
                        "description": "The route ID.",
                        "type": "string"
                    },
                    "RouteKey": {
                        "description": "The route key for the route.",
                        "type": "string"
                    },
                    "RouteResponseSelectionExpression": {
                        "description": "The route response selection expression for the route.",
                        "type": "string"
                    },
                    "Target": {
                        "description": "The target for the route.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetRouteResponseRequest": {
                "properties": {},
                "type": "object"
            },
            "GetRouteResponseResponse": {
                "properties": {
                    "ModelSelectionExpression": {
                        "description": "Represents the model selection expression of a route response.",
                        "type": "string"
                    },
                    "ResponseModels": {
                        "description": "Represents the response models of a route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseParameters": {
                        "description": "Represents the response parameters of a route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteResponseId": {
                        "description": "Represents the identifier of a route response.",
                        "type": "string"
                    },
                    "RouteResponseKey": {
                        "description": "Represents the route response key of a route response.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetRouteResponsesRequest": {
                "properties": {},
                "type": "object"
            },
            "GetRouteResponsesResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents a route response.",
                            "properties": {
                                "ModelSelectionExpression": {
                                    "description": "Represents the model selection expression of a route response.",
                                    "type": "string"
                                },
                                "ResponseModels": {
                                    "description": "Represents the response models of a route response.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "A string with a length between [1-128].",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "ResponseParameters": {
                                    "description": "Represents the response parameters of a route response.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                "properties": {
                                                    "Required": {
                                                        "description": "Whether or not the parameter is required.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "RouteResponseId": {
                                    "description": "Represents the identifier of a route response.",
                                    "type": "string"
                                },
                                "RouteResponseKey": {
                                    "description": "Represents the route response key of a route response.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "RouteResponseKey"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetRoutesRequest": {
                "properties": {},
                "type": "object"
            },
            "GetRoutesResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents a route.",
                            "properties": {
                                "ApiKeyRequired": {
                                    "description": "Specifies whether an API key is required for this route.",
                                    "type": "boolean"
                                },
                                "AuthorizationScopes": {
                                    "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                                    "items": {
                                        "description": "A string with a length between [1-64].",
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "AuthorizationType": {
                                    "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                                    "enum": [
                                        "NONE",
                                        "AWS_IAM",
                                        "CUSTOM"
                                    ],
                                    "type": "string"
                                },
                                "AuthorizerId": {
                                    "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                                    "type": "string"
                                },
                                "ModelSelectionExpression": {
                                    "description": "The model selection expression for the route.",
                                    "type": "string"
                                },
                                "OperationName": {
                                    "description": "The operation name for the route.",
                                    "type": "string"
                                },
                                "RequestModels": {
                                    "description": "The request models for the route.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "A string with a length between [1-128].",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "RequestParameters": {
                                    "description": "The request parameters for the route.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                                "properties": {
                                                    "Required": {
                                                        "description": "Whether or not the parameter is required.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "RouteId": {
                                    "description": "The route ID.",
                                    "type": "string"
                                },
                                "RouteKey": {
                                    "description": "The route key for the route.",
                                    "type": "string"
                                },
                                "RouteResponseSelectionExpression": {
                                    "description": "The route response selection expression for the route.",
                                    "type": "string"
                                },
                                "Target": {
                                    "description": "The target for the route.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "RouteKey"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetStageRequest": {
                "properties": {},
                "type": "object"
            },
            "GetStageResponse": {
                "properties": {
                    "AccessLogSettings": {
                        "description": "Settings for logging access in this stage.",
                        "properties": {
                            "DestinationArn": {
                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                "type": "string"
                            },
                            "Format": {
                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientCertificateId": {
                        "description": "The identifier of a client certificate for a Stage.",
                        "type": "string"
                    },
                    "CreatedDate": {
                        "description": "The timestamp when the stage was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DefaultRouteSettings": {
                        "description": "Default route settings for the stage.",
                        "properties": {
                            "DataTraceEnabled": {
                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                "type": "boolean"
                            },
                            "DetailedMetricsEnabled": {
                                "description": "Specifies whether detailed metrics are enabled.",
                                "type": "boolean"
                            },
                            "LoggingLevel": {
                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                "enum": [
                                    "ERROR",
                                    "INFO",
                                    "false"
                                ],
                                "type": "string"
                            },
                            "ThrottlingBurstLimit": {
                                "description": "Specifies the throttling burst limit.",
                                "type": "integer"
                            },
                            "ThrottlingRateLimit": {
                                "description": "Specifies the throttling rate limit.",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "DeploymentId": {
                        "description": "The identifier of the Deployment that the Stage is\n associated with.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the stage.",
                        "type": "string"
                    },
                    "LastUpdatedDate": {
                        "description": "The timestamp when the stage was last updated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "RouteSettings": {
                        "description": "Route settings for the stage.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Represents a collection of route settings.",
                                    "properties": {
                                        "DataTraceEnabled": {
                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                            "type": "boolean"
                                        },
                                        "DetailedMetricsEnabled": {
                                            "description": "Specifies whether detailed metrics are enabled.",
                                            "type": "boolean"
                                        },
                                        "LoggingLevel": {
                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                            "enum": [
                                                "ERROR",
                                                "INFO",
                                                "false"
                                            ],
                                            "type": "string"
                                        },
                                        "ThrottlingBurstLimit": {
                                            "description": "Specifies the throttling burst limit.",
                                            "type": "integer"
                                        },
                                        "ThrottlingRateLimit": {
                                            "description": "Specifies the throttling rate limit.",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "StageName": {
                        "description": "The name of the stage.",
                        "type": "string"
                    },
                    "StageVariables": {
                        "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-2048].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GetStagesRequest": {
                "properties": {},
                "type": "object"
            },
            "GetStagesResponse": {
                "properties": {
                    "Items": {
                        "description": "The elements from this collection.",
                        "items": {
                            "description": "Represents an API stage.",
                            "properties": {
                                "AccessLogSettings": {
                                    "description": "Settings for logging access in this stage.",
                                    "properties": {
                                        "DestinationArn": {
                                            "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                            "type": "string"
                                        },
                                        "Format": {
                                            "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "ClientCertificateId": {
                                    "description": "The identifier of a client certificate for a Stage.",
                                    "type": "string"
                                },
                                "CreatedDate": {
                                    "description": "The timestamp when the stage was created.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "DefaultRouteSettings": {
                                    "description": "Default route settings for the stage.",
                                    "properties": {
                                        "DataTraceEnabled": {
                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                            "type": "boolean"
                                        },
                                        "DetailedMetricsEnabled": {
                                            "description": "Specifies whether detailed metrics are enabled.",
                                            "type": "boolean"
                                        },
                                        "LoggingLevel": {
                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                            "enum": [
                                                "ERROR",
                                                "INFO",
                                                "false"
                                            ],
                                            "type": "string"
                                        },
                                        "ThrottlingBurstLimit": {
                                            "description": "Specifies the throttling burst limit.",
                                            "type": "integer"
                                        },
                                        "ThrottlingRateLimit": {
                                            "description": "Specifies the throttling rate limit.",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "DeploymentId": {
                                    "description": "The identifier of the Deployment that the Stage is\n associated with.",
                                    "type": "string"
                                },
                                "Description": {
                                    "description": "The description of the stage.",
                                    "type": "string"
                                },
                                "LastUpdatedDate": {
                                    "description": "The timestamp when the stage was last updated.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "RouteSettings": {
                                    "description": "Route settings for the stage.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "Represents a collection of route settings.",
                                                "properties": {
                                                    "DataTraceEnabled": {
                                                        "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                        "type": "boolean"
                                                    },
                                                    "DetailedMetricsEnabled": {
                                                        "description": "Specifies whether detailed metrics are enabled.",
                                                        "type": "boolean"
                                                    },
                                                    "LoggingLevel": {
                                                        "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                        "enum": [
                                                            "ERROR",
                                                            "INFO",
                                                            "false"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "ThrottlingBurstLimit": {
                                                        "description": "Specifies the throttling burst limit.",
                                                        "type": "integer"
                                                    },
                                                    "ThrottlingRateLimit": {
                                                        "description": "Specifies the throttling rate limit.",
                                                        "format": "double",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "StageName": {
                                    "description": "The name of the stage.",
                                    "type": "string"
                                },
                                "StageVariables": {
                                    "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "A string with a length between [0-2048].",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "StageName"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Id": {
                "description": "The identifier.",
                "type": "string"
            },
            "IdentitySourceList": {
                "description": "The identity source for which authorization is requested. For the REQUEST\n authorizer, this is required when authorization caching is enabled. The value is a\n comma-separated string of one or more mapping expressions of the specified request\n parameters. For example, if an Auth header, a Name query string parameter are defined\n as identity sources, this value is $method.request.header.Auth,\n $method.request.querystring.Name. These parameters will be used to derive\n the authorization caching key and to perform runtime validation of the REQUEST\n authorizer by verifying all of the identity-related request parameters are present,\n not null and non-empty. Only when this is true does the authorizer invoke the\n authorizer Lambda function, otherwise, it returns a 401 Unauthorized\n response without calling the Lambda function. The valid value is a string of\n comma-separated mapping expressions of the specified request parameters. When the\n authorization caching is not enabled, this property is optional.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "IntegerWithLengthBetween0And3600": {
                "description": "An integer with a value between [0-3600].",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "type": "integer"
            },
            "IntegerWithLengthBetween50And29000": {
                "description": "An integer with a value between [50-29000].",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "type": "integer"
            },
            "Integration": {
                "description": "Represents an integration.",
                "properties": {
                    "ConnectionId": {
                        "description": "The connection ID.",
                        "type": "string"
                    },
                    "ConnectionType": {
                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ],
                        "type": "string"
                    },
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "CredentialsArn": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Represents the description of an integration.",
                        "type": "string"
                    },
                    "IntegrationId": {
                        "description": "Represents the identifier of an integration.",
                        "type": "string"
                    },
                    "IntegrationMethod": {
                        "description": "Specifies the integration's HTTP method type.",
                        "type": "string"
                    },
                    "IntegrationResponseSelectionExpression": {
                        "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                        "type": "string"
                    },
                    "IntegrationType": {
                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                        "enum": [
                            "AWS",
                            "HTTP",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ],
                        "type": "string"
                    },
                    "IntegrationUri": {
                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                        "type": "string"
                    },
                    "PassthroughBehavior": {
                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                        "enum": [
                            "WHEN_NO_MATCH",
                            "NEVER",
                            "WHEN_NO_TEMPLATES"
                        ],
                        "type": "string"
                    },
                    "RequestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expression for the integration.",
                        "type": "string"
                    },
                    "TimeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "IntegrationParameters": {
                "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "description": "A string with a length between [1-512].",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "IntegrationResponse": {
                "description": "Represents an integration response.",
                "properties": {
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "IntegrationResponseId": {
                        "description": "The integration response ID.",
                        "type": "string"
                    },
                    "IntegrationResponseKey": {
                        "description": "The integration response key.",
                        "type": "string"
                    },
                    "ResponseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseTemplates": {
                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expressions for the integration response.",
                        "type": "string"
                    }
                },
                "required": [
                    "IntegrationResponseKey"
                ],
                "type": "object"
            },
            "IntegrationType": {
                "description": "Represents an API method integration type.",
                "enum": [
                    "AWS",
                    "HTTP",
                    "MOCK",
                    "HTTP_PROXY",
                    "AWS_PROXY"
                ],
                "type": "string"
            },
            "LoggingLevel": {
                "description": "The logging level.",
                "enum": [
                    "ERROR",
                    "INFO",
                    "false"
                ],
                "type": "string"
            },
            "Model": {
                "description": "Represents a data model for an API. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html\">Create Models and Mapping Templates for Request and Response\n Mappings</a>.",
                "properties": {
                    "ContentType": {
                        "description": "The content-type for the model, for example, \"application/json\".",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "ModelId": {
                        "description": "The model identifier.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the model. Must be alphanumeric.",
                        "type": "string"
                    },
                    "Schema": {
                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ],
                "type": "object"
            },
            "NextToken": {
                "description": "The next page of elements from this collection. Not valid for the last element of\n the collection.",
                "type": "string"
            },
            "NotFoundException": {},
            "ParameterConstraints": {
                "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                "properties": {
                    "Required": {
                        "description": "Whether or not the parameter is required.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "PassthroughBehavior": {
                "description": "Represents passthrough behavior for an integration response.",
                "enum": [
                    "WHEN_NO_MATCH",
                    "NEVER",
                    "WHEN_NO_TEMPLATES"
                ],
                "type": "string"
            },
            "ProtocolType": {
                "description": "",
                "enum": [
                    "WEBSOCKET"
                ],
                "type": "string"
            },
            "ProviderArnList": {
                "description": "For REQUEST authorizer, this is not defined.",
                "items": {
                    "description": "Represents an Amazon Resource Name (ARN).",
                    "type": "string"
                },
                "type": "array"
            },
            "Route": {
                "description": "Represents a route.",
                "properties": {
                    "ApiKeyRequired": {
                        "description": "Specifies whether an API key is required for this route.",
                        "type": "boolean"
                    },
                    "AuthorizationScopes": {
                        "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                        "items": {
                            "description": "A string with a length between [1-64].",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "AuthorizationType": {
                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                        "enum": [
                            "NONE",
                            "AWS_IAM",
                            "CUSTOM"
                        ],
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                        "type": "string"
                    },
                    "ModelSelectionExpression": {
                        "description": "The model selection expression for the route.",
                        "type": "string"
                    },
                    "OperationName": {
                        "description": "The operation name for the route.",
                        "type": "string"
                    },
                    "RequestModels": {
                        "description": "The request models for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestParameters": {
                        "description": "The request parameters for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteId": {
                        "description": "The route ID.",
                        "type": "string"
                    },
                    "RouteKey": {
                        "description": "The route key for the route.",
                        "type": "string"
                    },
                    "RouteResponseSelectionExpression": {
                        "description": "The route response selection expression for the route.",
                        "type": "string"
                    },
                    "Target": {
                        "description": "The target for the route.",
                        "type": "string"
                    }
                },
                "required": [
                    "RouteKey"
                ],
                "type": "object"
            },
            "RouteModels": {
                "description": "The route models.",
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "description": "A string with a length between [1-128].",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "RouteParameters": {
                "description": "The route parameters.",
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                            "properties": {
                                "Required": {
                                    "description": "Whether or not the parameter is required.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "RouteResponse": {
                "description": "Represents a route response.",
                "properties": {
                    "ModelSelectionExpression": {
                        "description": "Represents the model selection expression of a route response.",
                        "type": "string"
                    },
                    "ResponseModels": {
                        "description": "Represents the response models of a route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseParameters": {
                        "description": "Represents the response parameters of a route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteResponseId": {
                        "description": "Represents the identifier of a route response.",
                        "type": "string"
                    },
                    "RouteResponseKey": {
                        "description": "Represents the route response key of a route response.",
                        "type": "string"
                    }
                },
                "required": [
                    "RouteResponseKey"
                ],
                "type": "object"
            },
            "RouteSettings": {
                "description": "Represents a collection of route settings.",
                "properties": {
                    "DataTraceEnabled": {
                        "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                        "type": "boolean"
                    },
                    "DetailedMetricsEnabled": {
                        "description": "Specifies whether detailed metrics are enabled.",
                        "type": "boolean"
                    },
                    "LoggingLevel": {
                        "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                        "enum": [
                            "ERROR",
                            "INFO",
                            "false"
                        ],
                        "type": "string"
                    },
                    "ThrottlingBurstLimit": {
                        "description": "Specifies the throttling burst limit.",
                        "type": "integer"
                    },
                    "ThrottlingRateLimit": {
                        "description": "Specifies the throttling rate limit.",
                        "format": "double",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "RouteSettingsMap": {
                "description": "The route settings map.",
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "description": "Represents a collection of route settings.",
                            "properties": {
                                "DataTraceEnabled": {
                                    "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                    "type": "boolean"
                                },
                                "DetailedMetricsEnabled": {
                                    "description": "Specifies whether detailed metrics are enabled.",
                                    "type": "boolean"
                                },
                                "LoggingLevel": {
                                    "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                    "enum": [
                                        "ERROR",
                                        "INFO",
                                        "false"
                                    ],
                                    "type": "string"
                                },
                                "ThrottlingBurstLimit": {
                                    "description": "Specifies the throttling burst limit.",
                                    "type": "integer"
                                },
                                "ThrottlingRateLimit": {
                                    "description": "Specifies the throttling rate limit.",
                                    "format": "double",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "SelectionExpression": {
                "description": "An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.",
                "type": "string"
            },
            "SelectionKey": {
                "description": "After evaulating a selection expression, the result is compared against one or\n more selection keys to find a matching key. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for a list of expressions and each expression's\n associated selection key type.",
                "type": "string"
            },
            "Stage": {
                "description": "Represents an API stage.",
                "properties": {
                    "AccessLogSettings": {
                        "description": "Settings for logging access in this stage.",
                        "properties": {
                            "DestinationArn": {
                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                "type": "string"
                            },
                            "Format": {
                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientCertificateId": {
                        "description": "The identifier of a client certificate for a Stage.",
                        "type": "string"
                    },
                    "CreatedDate": {
                        "description": "The timestamp when the stage was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DefaultRouteSettings": {
                        "description": "Default route settings for the stage.",
                        "properties": {
                            "DataTraceEnabled": {
                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                "type": "boolean"
                            },
                            "DetailedMetricsEnabled": {
                                "description": "Specifies whether detailed metrics are enabled.",
                                "type": "boolean"
                            },
                            "LoggingLevel": {
                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                "enum": [
                                    "ERROR",
                                    "INFO",
                                    "false"
                                ],
                                "type": "string"
                            },
                            "ThrottlingBurstLimit": {
                                "description": "Specifies the throttling burst limit.",
                                "type": "integer"
                            },
                            "ThrottlingRateLimit": {
                                "description": "Specifies the throttling rate limit.",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "DeploymentId": {
                        "description": "The identifier of the Deployment that the Stage is\n associated with.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the stage.",
                        "type": "string"
                    },
                    "LastUpdatedDate": {
                        "description": "The timestamp when the stage was last updated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "RouteSettings": {
                        "description": "Route settings for the stage.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Represents a collection of route settings.",
                                    "properties": {
                                        "DataTraceEnabled": {
                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                            "type": "boolean"
                                        },
                                        "DetailedMetricsEnabled": {
                                            "description": "Specifies whether detailed metrics are enabled.",
                                            "type": "boolean"
                                        },
                                        "LoggingLevel": {
                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                            "enum": [
                                                "ERROR",
                                                "INFO",
                                                "false"
                                            ],
                                            "type": "string"
                                        },
                                        "ThrottlingBurstLimit": {
                                            "description": "Specifies the throttling burst limit.",
                                            "type": "integer"
                                        },
                                        "ThrottlingRateLimit": {
                                            "description": "Specifies the throttling rate limit.",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "StageName": {
                        "description": "The name of the stage.",
                        "type": "string"
                    },
                    "StageVariables": {
                        "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-2048].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "StageName"
                ],
                "type": "object"
            },
            "StageVariablesMap": {
                "description": "The stage variable map.",
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "description": "A string with a length between [0-2048].",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "StringWithLengthBetween0And1024": {
                "description": "A string with a length between [0-1024].",
                "type": "string"
            },
            "StringWithLengthBetween0And2048": {
                "description": "A string with a length between [0-2048].",
                "type": "string"
            },
            "StringWithLengthBetween0And32K": {
                "description": "A string with a length between [0-32768].",
                "type": "string"
            },
            "StringWithLengthBetween1And1024": {
                "description": "A string with a length between [1-1024].",
                "type": "string"
            },
            "StringWithLengthBetween1And128": {
                "description": "A string with a length between [1-128].",
                "type": "string"
            },
            "StringWithLengthBetween1And256": {
                "description": "A string with a length between [1-256].",
                "type": "string"
            },
            "StringWithLengthBetween1And512": {
                "description": "A string with a length between [1-512].",
                "type": "string"
            },
            "StringWithLengthBetween1And64": {
                "description": "A string with a length between [1-64].",
                "type": "string"
            },
            "TemplateMap": {
                "description": "A mapping of identifier keys to templates. The value is an actual template script.\n The key is typically a SelectionKey which is chosen based on evaluating\n a selection expression.",
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "description": "A string with a length between [0-32768].",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "TooManyRequestsException": {},
            "UpdateApiMappingRequest": {
                "properties": {
                    "ApiId": {
                        "description": "The API identifier.",
                        "type": "string"
                    },
                    "ApiMappingKey": {
                        "description": "The API mapping key.",
                        "type": "string"
                    },
                    "Stage": {
                        "description": "The API stage.",
                        "type": "string"
                    }
                },
                "required": [
                    "ApiId"
                ],
                "type": "object"
            },
            "UpdateApiMappingResponse": {
                "properties": {
                    "ApiId": {
                        "description": "The API identifier.",
                        "type": "string"
                    },
                    "ApiMappingId": {
                        "description": "The API mapping identifier.",
                        "type": "string"
                    },
                    "ApiMappingKey": {
                        "description": "The API mapping key.",
                        "type": "string"
                    },
                    "Stage": {
                        "description": "The API stage.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateApiRequest": {
                "properties": {
                    "ApiKeySelectionExpression": {
                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the API.",
                        "type": "string"
                    },
                    "DisableSchemaValidation": {
                        "description": "Avoid validating models when creating a deployment.",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "The name of the API.",
                        "type": "string"
                    },
                    "RouteSelectionExpression": {
                        "description": "The route selection expression for the API.",
                        "type": "string"
                    },
                    "Version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateApiResponse": {
                "properties": {
                    "ApiEndpoint": {
                        "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                        "type": "string"
                    },
                    "ApiId": {
                        "description": "The API ID.",
                        "type": "string"
                    },
                    "ApiKeySelectionExpression": {
                        "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                        "type": "string"
                    },
                    "CreatedDate": {
                        "description": "The timestamp when the API was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the API.",
                        "type": "string"
                    },
                    "DisableSchemaValidation": {
                        "description": "Avoid validating models when creating a deployment.",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "The name of the API.",
                        "type": "string"
                    },
                    "ProtocolType": {
                        "description": "The API protocol: Currently only WEBSOCKET is supported.",
                        "enum": [
                            "WEBSOCKET"
                        ],
                        "type": "string"
                    },
                    "RouteSelectionExpression": {
                        "description": "The route selection expression for the API.",
                        "type": "string"
                    },
                    "Version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "Warnings": {
                        "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UpdateAuthorizerRequest": {
                "properties": {
                    "AuthorizerCredentialsArn": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                        "type": "string"
                    },
                    "AuthorizerResultTtlInSeconds": {
                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it is zero,\n authorization caching is disabled. If it is greater than zero, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    },
                    "AuthorizerType": {
                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                        "enum": [
                            "REQUEST"
                        ],
                        "type": "string"
                    },
                    "AuthorizerUri": {
                        "description": "The authorizer's Uniform Resource Identifier (URI). For\n REQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                        "type": "string"
                    },
                    "IdentitySource": {
                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth header, a\n Name query string parameter are defined as identity sources, this value is\n $method.request.header.Auth, $method.request.querystring.Name. These\n parameters will be used to derive the authorization caching key and to perform\n runtime validation of the REQUEST authorizer by verifying all of the\n identity-related request parameters are present, not null and non-empty. Only when\n this is true does the authorizer invoke the authorizer Lambda function, otherwise, it\n returns a 401 Unauthorized response without calling the Lambda function.\n The valid value is a string of comma-separated mapping expressions of the specified\n request parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "IdentityValidationExpression": {
                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "ProviderArns": {
                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                        "items": {
                            "description": "Represents an Amazon Resource Name (ARN).",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UpdateAuthorizerResponse": {
                "properties": {
                    "AuthorizerCredentialsArn": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The authorizer identifier.",
                        "type": "string"
                    },
                    "AuthorizerResultTtlInSeconds": {
                        "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    },
                    "AuthorizerType": {
                        "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                        "enum": [
                            "REQUEST"
                        ],
                        "type": "string"
                    },
                    "AuthorizerUri": {
                        "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                        "type": "string"
                    },
                    "IdentitySource": {
                        "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "IdentityValidationExpression": {
                        "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "ProviderArns": {
                        "description": "For\n REQUEST authorizer, this is not\n defined.",
                        "items": {
                            "description": "Represents an Amazon Resource Name (ARN).",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UpdateDeploymentRequest": {
                "properties": {
                    "Description": {
                        "description": "The description for the deployment resource.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateDeploymentResponse": {
                "properties": {
                    "CreatedDate": {
                        "description": "The date and time when the Deployment resource was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DeploymentId": {
                        "description": "The identifier for the deployment.",
                        "type": "string"
                    },
                    "DeploymentStatus": {
                        "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                        "enum": [
                            "PENDING",
                            "FAILED",
                            "DEPLOYED"
                        ],
                        "type": "string"
                    },
                    "DeploymentStatusMessage": {
                        "description": "May contain additional feedback on the status of an API deployment.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description for the deployment.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateDomainNameRequest": {
                "properties": {
                    "DomainNameConfigurations": {
                        "description": "The domain name configurations.",
                        "items": {
                            "description": "The domain name configuration.",
                            "properties": {
                                "ApiGatewayDomainName": {
                                    "description": "A domain name for the WebSocket API.",
                                    "type": "string"
                                },
                                "CertificateArn": {
                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                    "type": "string"
                                },
                                "CertificateName": {
                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                    "type": "string"
                                },
                                "CertificateUploadDate": {
                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EndpointType": {
                                    "description": "The endpoint type.",
                                    "enum": [
                                        "REGIONAL",
                                        "EDGE"
                                    ],
                                    "type": "string"
                                },
                                "HostedZoneId": {
                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UpdateDomainNameResponse": {
                "properties": {
                    "ApiMappingSelectionExpression": {
                        "description": "The API mapping selection expression.",
                        "type": "string"
                    },
                    "DomainName": {
                        "description": "The name of the DomainName resource.",
                        "type": "string"
                    },
                    "DomainNameConfigurations": {
                        "description": "The domain name configurations.",
                        "items": {
                            "description": "The domain name configuration.",
                            "properties": {
                                "ApiGatewayDomainName": {
                                    "description": "A domain name for the WebSocket API.",
                                    "type": "string"
                                },
                                "CertificateArn": {
                                    "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                    "type": "string"
                                },
                                "CertificateName": {
                                    "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                    "type": "string"
                                },
                                "CertificateUploadDate": {
                                    "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EndpointType": {
                                    "description": "The endpoint type.",
                                    "enum": [
                                        "REGIONAL",
                                        "EDGE"
                                    ],
                                    "type": "string"
                                },
                                "HostedZoneId": {
                                    "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UpdateIntegrationRequest": {
                "properties": {
                    "ConnectionId": {
                        "description": "The connection ID.",
                        "type": "string"
                    },
                    "ConnectionType": {
                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ],
                        "type": "string"
                    },
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "CredentialsArn": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the integration",
                        "type": "string"
                    },
                    "IntegrationMethod": {
                        "description": "Specifies the integration's HTTP method type.",
                        "type": "string"
                    },
                    "IntegrationType": {
                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                        "enum": [
                            "AWS",
                            "HTTP",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ],
                        "type": "string"
                    },
                    "IntegrationUri": {
                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                        "type": "string"
                    },
                    "PassthroughBehavior": {
                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                        "enum": [
                            "WHEN_NO_MATCH",
                            "NEVER",
                            "WHEN_NO_TEMPLATES"
                        ],
                        "type": "string"
                    },
                    "RequestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expression for the integration.",
                        "type": "string"
                    },
                    "TimeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "UpdateIntegrationResponse": {
                "properties": {
                    "ConnectionId": {
                        "description": "The connection ID.",
                        "type": "string"
                    },
                    "ConnectionType": {
                        "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ],
                        "type": "string"
                    },
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "CredentialsArn": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Represents the description of an integration.",
                        "type": "string"
                    },
                    "IntegrationId": {
                        "description": "Represents the identifier of an integration.",
                        "type": "string"
                    },
                    "IntegrationMethod": {
                        "description": "Specifies the integration's HTTP method type.",
                        "type": "string"
                    },
                    "IntegrationResponseSelectionExpression": {
                        "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                        "type": "string"
                    },
                    "IntegrationType": {
                        "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                        "enum": [
                            "AWS",
                            "HTTP",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ],
                        "type": "string"
                    },
                    "IntegrationUri": {
                        "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                        "type": "string"
                    },
                    "PassthroughBehavior": {
                        "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                        "enum": [
                            "WHEN_NO_MATCH",
                            "NEVER",
                            "WHEN_NO_TEMPLATES"
                        ],
                        "type": "string"
                    },
                    "RequestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expression for the integration.",
                        "type": "string"
                    },
                    "TimeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "UpdateIntegrationResponseRequest": {
                "properties": {
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "IntegrationResponseKey": {
                        "description": "The integration response key.",
                        "type": "string"
                    },
                    "ResponseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of\n method.response.header.{name}\n , where name is a valid and unique header name. The mapped non-static value\n must match the pattern of\n integration.response.header.{name}\n  or\n integration.response.body.{JSON-expression}\n , where \n {name}\n  is a valid and unique response header name and \n {JSON-expression}\n  is a valid JSON expression without the $ prefix.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseTemplates": {
                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expression for the integration response.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateIntegrationResponseResponse": {
                "properties": {
                    "ContentHandlingStrategy": {
                        "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ],
                        "type": "string"
                    },
                    "IntegrationResponseId": {
                        "description": "The integration response ID.",
                        "type": "string"
                    },
                    "IntegrationResponseKey": {
                        "description": "The integration response key.",
                        "type": "string"
                    },
                    "ResponseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-512].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseTemplates": {
                        "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-32768].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "TemplateSelectionExpression": {
                        "description": "The template selection expressions for the integration response.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateModelRequest": {
                "properties": {
                    "ContentType": {
                        "description": "The content-type for the model, for example, \"application/json\".",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the model.",
                        "type": "string"
                    },
                    "Schema": {
                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateModelResponse": {
                "properties": {
                    "ContentType": {
                        "description": "The content-type for the model, for example, \"application/json\".",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "ModelId": {
                        "description": "The model identifier.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the model. Must be alphanumeric.",
                        "type": "string"
                    },
                    "Schema": {
                        "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateRouteRequest": {
                "properties": {
                    "ApiKeyRequired": {
                        "description": "Specifies whether an API key is required for the route.",
                        "type": "boolean"
                    },
                    "AuthorizationScopes": {
                        "description": "The authorization scopes supported by this\n route.",
                        "items": {
                            "description": "A string with a length between [1-64].",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "AuthorizationType": {
                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer.",
                        "enum": [
                            "NONE",
                            "AWS_IAM",
                            "CUSTOM"
                        ],
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                        "type": "string"
                    },
                    "ModelSelectionExpression": {
                        "description": "The model selection expression for the route.",
                        "type": "string"
                    },
                    "OperationName": {
                        "description": "The operation name for the route.",
                        "type": "string"
                    },
                    "RequestModels": {
                        "description": "The request models for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestParameters": {
                        "description": "The request parameters for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteKey": {
                        "description": "The route key for the route.",
                        "type": "string"
                    },
                    "RouteResponseSelectionExpression": {
                        "description": "The route response selection expression for the route.",
                        "type": "string"
                    },
                    "Target": {
                        "description": "The target for the route.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateRouteResponse": {
                "properties": {
                    "ApiKeyRequired": {
                        "description": "Specifies whether an API key is required for this route.",
                        "type": "boolean"
                    },
                    "AuthorizationScopes": {
                        "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                        "items": {
                            "description": "A string with a length between [1-64].",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "AuthorizationType": {
                        "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                        "enum": [
                            "NONE",
                            "AWS_IAM",
                            "CUSTOM"
                        ],
                        "type": "string"
                    },
                    "AuthorizerId": {
                        "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                        "type": "string"
                    },
                    "ModelSelectionExpression": {
                        "description": "The model selection expression for the route.",
                        "type": "string"
                    },
                    "OperationName": {
                        "description": "The operation name for the route.",
                        "type": "string"
                    },
                    "RequestModels": {
                        "description": "The request models for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RequestParameters": {
                        "description": "The request parameters for the route.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteId": {
                        "description": "The route ID.",
                        "type": "string"
                    },
                    "RouteKey": {
                        "description": "The route key for the route.",
                        "type": "string"
                    },
                    "RouteResponseSelectionExpression": {
                        "description": "The route response selection expression for the route.",
                        "type": "string"
                    },
                    "Target": {
                        "description": "The target for the route.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateRouteResponseRequest": {
                "properties": {
                    "ModelSelectionExpression": {
                        "description": "The model selection expression for the route response.",
                        "type": "string"
                    },
                    "ResponseModels": {
                        "description": "The response models for the route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseParameters": {
                        "description": "The route response parameters.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteResponseKey": {
                        "description": "The route response key.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateRouteResponseResponse": {
                "properties": {
                    "ModelSelectionExpression": {
                        "description": "Represents the model selection expression of a route response.",
                        "type": "string"
                    },
                    "ResponseModels": {
                        "description": "Represents the response models of a route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [1-128].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResponseParameters": {
                        "description": "Represents the response parameters of a route response.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                    "properties": {
                                        "Required": {
                                            "description": "Whether or not the parameter is required.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "RouteResponseId": {
                        "description": "Represents the identifier of a route response.",
                        "type": "string"
                    },
                    "RouteResponseKey": {
                        "description": "Represents the route response key of a route response.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateStageRequest": {
                "properties": {
                    "AccessLogSettings": {
                        "description": "Settings for logging access in this stage.",
                        "properties": {
                            "DestinationArn": {
                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                "type": "string"
                            },
                            "Format": {
                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientCertificateId": {
                        "description": "The identifier of a client certificate for a Stage.",
                        "type": "string"
                    },
                    "DefaultRouteSettings": {
                        "description": "The default route settings for the stage.",
                        "properties": {
                            "DataTraceEnabled": {
                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                "type": "boolean"
                            },
                            "DetailedMetricsEnabled": {
                                "description": "Specifies whether detailed metrics are enabled.",
                                "type": "boolean"
                            },
                            "LoggingLevel": {
                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                "enum": [
                                    "ERROR",
                                    "INFO",
                                    "false"
                                ],
                                "type": "string"
                            },
                            "ThrottlingBurstLimit": {
                                "description": "Specifies the throttling burst limit.",
                                "type": "integer"
                            },
                            "ThrottlingRateLimit": {
                                "description": "Specifies the throttling rate limit.",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "DeploymentId": {
                        "description": "The deployment identifier for the API stage.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description for the API stage.",
                        "type": "string"
                    },
                    "RouteSettings": {
                        "description": "Route settings for the stage.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Represents a collection of route settings.",
                                    "properties": {
                                        "DataTraceEnabled": {
                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                            "type": "boolean"
                                        },
                                        "DetailedMetricsEnabled": {
                                            "description": "Specifies whether detailed metrics are enabled.",
                                            "type": "boolean"
                                        },
                                        "LoggingLevel": {
                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                            "enum": [
                                                "ERROR",
                                                "INFO",
                                                "false"
                                            ],
                                            "type": "string"
                                        },
                                        "ThrottlingBurstLimit": {
                                            "description": "Specifies the throttling burst limit.",
                                            "type": "integer"
                                        },
                                        "ThrottlingRateLimit": {
                                            "description": "Specifies the throttling rate limit.",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "StageVariables": {
                        "description": "A map that defines the stage variables for a Stage. Variable names\n can have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-2048].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UpdateStageResponse": {
                "properties": {
                    "AccessLogSettings": {
                        "description": "Settings for logging access in this stage.",
                        "properties": {
                            "DestinationArn": {
                                "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                "type": "string"
                            },
                            "Format": {
                                "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientCertificateId": {
                        "description": "The identifier of a client certificate for a Stage.",
                        "type": "string"
                    },
                    "CreatedDate": {
                        "description": "The timestamp when the stage was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DefaultRouteSettings": {
                        "description": "Default route settings for the stage.",
                        "properties": {
                            "DataTraceEnabled": {
                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                "type": "boolean"
                            },
                            "DetailedMetricsEnabled": {
                                "description": "Specifies whether detailed metrics are enabled.",
                                "type": "boolean"
                            },
                            "LoggingLevel": {
                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                "enum": [
                                    "ERROR",
                                    "INFO",
                                    "false"
                                ],
                                "type": "string"
                            },
                            "ThrottlingBurstLimit": {
                                "description": "Specifies the throttling burst limit.",
                                "type": "integer"
                            },
                            "ThrottlingRateLimit": {
                                "description": "Specifies the throttling rate limit.",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "DeploymentId": {
                        "description": "The identifier of the Deployment that the Stage is\n associated with.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The description of the stage.",
                        "type": "string"
                    },
                    "LastUpdatedDate": {
                        "description": "The timestamp when the stage was last updated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "RouteSettings": {
                        "description": "Route settings for the stage.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Represents a collection of route settings.",
                                    "properties": {
                                        "DataTraceEnabled": {
                                            "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                            "type": "boolean"
                                        },
                                        "DetailedMetricsEnabled": {
                                            "description": "Specifies whether detailed metrics are enabled.",
                                            "type": "boolean"
                                        },
                                        "LoggingLevel": {
                                            "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                            "enum": [
                                                "ERROR",
                                                "INFO",
                                                "false"
                                            ],
                                            "type": "string"
                                        },
                                        "ThrottlingBurstLimit": {
                                            "description": "Specifies the throttling burst limit.",
                                            "type": "integer"
                                        },
                                        "ThrottlingRateLimit": {
                                            "description": "Specifies the throttling rate limit.",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "StageName": {
                        "description": "The name of the stage.",
                        "type": "string"
                    },
                    "StageVariables": {
                        "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "description": "A string with a length between [0-2048].",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UriWithLengthBetween1And2048": {
                "description": "A string representation of a URI with a length between [1-2048].",
                "type": "string"
            },
            "__boolean": {
                "type": "boolean"
            },
            "__double": {
                "format": "double",
                "type": "number"
            },
            "__integer": {
                "type": "integer"
            },
            "__listOfApi": {
                "items": {
                    "description": "Represents an API.",
                    "properties": {
                        "ApiEndpoint": {
                            "description": "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The\n stage name is typically appended to this URI to form a complete path to a deployed\n API stage.",
                            "type": "string"
                        },
                        "ApiId": {
                            "description": "The API ID.",
                            "type": "string"
                        },
                        "ApiKeySelectionExpression": {
                            "description": "An API key selection expression. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">API Key Selection Expressions</a>.",
                            "type": "string"
                        },
                        "CreatedDate": {
                            "description": "The timestamp when the API was created.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "Description": {
                            "description": "The description of the API.",
                            "type": "string"
                        },
                        "DisableSchemaValidation": {
                            "description": "Avoid validating models when creating a deployment.",
                            "type": "boolean"
                        },
                        "Name": {
                            "description": "The name of the API.",
                            "type": "string"
                        },
                        "ProtocolType": {
                            "description": "The API protocol: Currently only WEBSOCKET is supported.",
                            "enum": [
                                "WEBSOCKET"
                            ],
                            "type": "string"
                        },
                        "RouteSelectionExpression": {
                            "description": "The route selection expression for the API.",
                            "type": "string"
                        },
                        "Version": {
                            "description": "A version identifier for the API.",
                            "type": "string"
                        },
                        "Warnings": {
                            "description": "The warning messages reported when failonwarnings is turned on during\n API import.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "RouteSelectionExpression",
                        "ProtocolType",
                        "Name"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfApiMapping": {
                "items": {
                    "description": "Represents an API mapping.",
                    "properties": {
                        "ApiId": {
                            "description": "The API identifier.",
                            "type": "string"
                        },
                        "ApiMappingId": {
                            "description": "The API mapping identifier.",
                            "type": "string"
                        },
                        "ApiMappingKey": {
                            "description": "The API mapping key.",
                            "type": "string"
                        },
                        "Stage": {
                            "description": "The API stage.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "Stage",
                        "ApiId"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfAuthorizer": {
                "items": {
                    "description": "Represents an authorizer.",
                    "properties": {
                        "AuthorizerCredentialsArn": {
                            "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the\n authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon\n Resource Name (ARN). To use resource-based permissions on the Lambda function,\n specify null.",
                            "type": "string"
                        },
                        "AuthorizerId": {
                            "description": "The authorizer identifier.",
                            "type": "string"
                        },
                        "AuthorizerResultTtlInSeconds": {
                            "description": "The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,\n authorization caching is disabled. If it is greater than 0, API Gateway will cache\n authorizer responses. If this field is not set, the default value is 300. The maximum\n value is 3600, or 1 hour.",
                            "maximum": 2147483647,
                            "minimum": -2147483648,
                            "type": "integer"
                        },
                        "AuthorizerType": {
                            "description": "The authorizer type. Currently the only valid value is REQUEST, for a\n Lambda function using incoming request parameters.",
                            "enum": [
                                "REQUEST"
                            ],
                            "type": "string"
                        },
                        "AuthorizerUri": {
                            "description": "The authorizer's Uniform Resource Identifier (URI).\n ForREQUEST authorizers, this must be a\n well-formed Lambda function URI, for example,\n arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.\n In general, the URI has this form:\n arn:aws:apigateway:{region}:lambda:path/{service_api}\n , where {region} is the same as the region hosting the Lambda\n function, path indicates that the remaining substring in the URI should be treated as\n the path to the resource, including the initial /. For Lambda functions,\n this is usually of the form\n /2015-03-31/functions/[FunctionARN]/invocations.",
                            "type": "string"
                        },
                        "IdentitySource": {
                            "description": "<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization\n caching is enabled. The value is a comma-separated string of one or more mapping\n expressions of the specified request parameters. For example, if an Auth\n header and a Name query string parameters are defined as identity\n sources, this value is method.request.header.Auth,\n method.request.querystring.Name. These parameters will be used to\n derive the authorization caching key and to perform runtime validation of the\n REQUEST authorizer by verifying all of the identity-related request\n parameters are present, not null, and non-empty. Only when this is true does the\n authorizer invoke the authorizer Lambda function, otherwise, it returns a 401\n Unauthorized response without calling the Lambda function. The valid value\n is a string of comma-separated mapping expressions of the specified request\n parameters. When the authorization caching is not enabled, this property is\n optional.</p>",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "IdentityValidationExpression": {
                            "description": "The\n validation expression does not apply to the REQUEST authorizer.",
                            "type": "string"
                        },
                        "Name": {
                            "description": "The name of the authorizer.",
                            "type": "string"
                        },
                        "ProviderArns": {
                            "description": "For\n REQUEST authorizer, this is not\n defined.",
                            "items": {
                                "description": "Represents an Amazon Resource Name (ARN).",
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "Name"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfDeployment": {
                "items": {
                    "description": "An immutable representation of an API that can be called by users. A\n Deployment must be associated with a Stage for it to be\n callable over the internet.",
                    "properties": {
                        "CreatedDate": {
                            "description": "The date and time when the Deployment resource was created.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "DeploymentId": {
                            "description": "The identifier for the deployment.",
                            "type": "string"
                        },
                        "DeploymentStatus": {
                            "description": "The status of the deployment: PENDING, FAILED, or\n SUCCEEDED.",
                            "enum": [
                                "PENDING",
                                "FAILED",
                                "DEPLOYED"
                            ],
                            "type": "string"
                        },
                        "DeploymentStatusMessage": {
                            "description": "May contain additional feedback on the status of an API deployment.",
                            "type": "string"
                        },
                        "Description": {
                            "description": "The description for the deployment.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfDomainName": {
                "items": {
                    "description": "Represents a domain name.",
                    "properties": {
                        "ApiMappingSelectionExpression": {
                            "description": "The API mapping selection expression.",
                            "type": "string"
                        },
                        "DomainName": {
                            "description": "The name of the DomainName resource.",
                            "type": "string"
                        },
                        "DomainNameConfigurations": {
                            "description": "The domain name configurations.",
                            "items": {
                                "description": "The domain name configuration.",
                                "properties": {
                                    "ApiGatewayDomainName": {
                                        "description": "A domain name for the WebSocket API.",
                                        "type": "string"
                                    },
                                    "CertificateArn": {
                                        "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for\n this domain name. AWS Certificate Manager is the only supported source.",
                                        "type": "string"
                                    },
                                    "CertificateName": {
                                        "description": "The user-friendly name of the certificate that will be used by the edge-optimized\n endpoint for this domain name.",
                                        "type": "string"
                                    },
                                    "CertificateUploadDate": {
                                        "description": "The timestamp when the certificate that was used by edge-optimized endpoint for\n this domain name was uploaded.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "EndpointType": {
                                        "description": "The endpoint type.",
                                        "enum": [
                                            "REGIONAL",
                                            "EDGE"
                                        ],
                                        "type": "string"
                                    },
                                    "HostedZoneId": {
                                        "description": "The Amazon Route 53 Hosted Zone ID of the endpoint.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "DomainName"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfIntegration": {
                "items": {
                    "description": "Represents an integration.",
                    "properties": {
                        "ConnectionId": {
                            "description": "The connection ID.",
                            "type": "string"
                        },
                        "ConnectionType": {
                            "description": "The type of the network connection to the integration endpoint. Currently the only\n valid value is INTERNET, for connections through the public routable\n internet.",
                            "enum": [
                                "INTERNET",
                                "VPC_LINK"
                            ],
                            "type": "string"
                        },
                        "ContentHandlingStrategy": {
                            "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                            "enum": [
                                "CONVERT_TO_BINARY",
                                "CONVERT_TO_TEXT"
                            ],
                            "type": "string"
                        },
                        "CredentialsArn": {
                            "description": "Specifies the credentials required for the integration, if any. For AWS\n integrations, three options are available. To specify an IAM Role for API Gateway to\n assume, use the role's Amazon Resource Name (ARN). To require that the caller's\n identity be passed through from the request, specify the string\n arn:aws:iam::*:user/*. To use resource-based permissions on supported\n AWS services, specify null.",
                            "type": "string"
                        },
                        "Description": {
                            "description": "Represents the description of an integration.",
                            "type": "string"
                        },
                        "IntegrationId": {
                            "description": "Represents the identifier of an integration.",
                            "type": "string"
                        },
                        "IntegrationMethod": {
                            "description": "Specifies the integration's HTTP method type.",
                            "type": "string"
                        },
                        "IntegrationResponseSelectionExpression": {
                            "description": "The integration response selection expression for the integration. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions\">Integration Response Selection Expressions</a>.",
                            "type": "string"
                        },
                        "IntegrationType": {
                            "description": "<p>The integration type of an integration. One of the following:</p><p>\n AWS: for integrating the route or method request with an AWS service\n action, including the Lambda function-invoking action. With the Lambda\n function-invoking action, this is referred to as the Lambda custom integration. With\n any other AWS service action, this is known as AWS integration.</p><p>\n AWS_PROXY: for integrating the route or method request with the Lambda\n function-invoking action with the client request passed through as-is. This\n integration is also referred to as Lambda proxy integration.</p><p>\n HTTP: for integrating the route or method request with an HTTP\n endpoint. This\n integration is also referred to as the HTTP custom integration.</p><p>\n HTTP_PROXY: for integrating route or method request with an HTTP\n endpoint, with the client\n request passed through as-is. This is also referred to as HTTP proxy\n integration.</p><p>\n MOCK: for integrating the route or method request with API Gateway as a\n \"loopback\" endpoint without invoking any backend.</p>",
                            "enum": [
                                "AWS",
                                "HTTP",
                                "MOCK",
                                "HTTP_PROXY",
                                "AWS_PROXY"
                            ],
                            "type": "string"
                        },
                        "IntegrationUri": {
                            "description": "For a Lambda proxy integration, this is the URI of the Lambda function.",
                            "type": "string"
                        },
                        "PassthroughBehavior": {
                            "description": "<p>Specifies the pass-through behavior for incoming requests based on the\n Content-Type header in the request, and the available mapping\n templates specified as the requestTemplates property on the\n Integration resource. There are three valid values:\n WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n NEVER.</p><p>\n WHEN_NO_MATCH passes the request body for unmapped content types through\n to the integration backend without transformation.</p><p>\n NEVER rejects unmapped content types with an HTTP 415 Unsupported\n Media Type response.</p><p>\n WHEN_NO_TEMPLATES allows pass-through when the integration has no\n content types mapped to templates. However, if there is at least one content type\n defined, unmapped content types will be rejected with the same HTTP 415\n Unsupported Media Type response.</p>",
                            "enum": [
                                "WHEN_NO_MATCH",
                                "NEVER",
                                "WHEN_NO_TEMPLATES"
                            ],
                            "type": "string"
                        },
                        "RequestParameters": {
                            "description": "A key-value map specifying request parameters that are passed from the method\n request to the backend. The key is an integration request parameter name and the\n associated value is a method request parameter value or static value that must be\n enclosed within single quotes and pre-encoded as required by the backend. The method\n request parameter value must match the pattern of\n method.request.{location}.{name}\n , where \n {location}\n  is querystring, path, or header; and \n {name}\n  must be a valid and unique method request parameter name.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "A string with a length between [1-512].",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "RequestTemplates": {
                            "description": "Represents a map of Velocity templates that are applied on the request payload\n based on the value of the Content-Type header sent by the client. The content type\n value is the key in this map, and the template (as a String) is the value.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "A string with a length between [0-32768].",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "TemplateSelectionExpression": {
                            "description": "The template selection expression for the integration.",
                            "type": "string"
                        },
                        "TimeoutInMillis": {
                            "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000\n milliseconds or 29 seconds.",
                            "maximum": 2147483647,
                            "minimum": -2147483648,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfIntegrationResponse": {
                "items": {
                    "description": "Represents an integration response.",
                    "properties": {
                        "ContentHandlingStrategy": {
                            "description": "<p>Specifies how to handle response payload content type conversions. Supported\n values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the\n following behaviors:</p><p>\n CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded\n string to the corresponding binary blob.</p><p>\n CONVERT_TO_TEXT: Converts a response payload from a binary blob to a\n Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from\n the integration response to the route response or method response without\n modification.</p>",
                            "enum": [
                                "CONVERT_TO_BINARY",
                                "CONVERT_TO_TEXT"
                            ],
                            "type": "string"
                        },
                        "IntegrationResponseId": {
                            "description": "The integration response ID.",
                            "type": "string"
                        },
                        "IntegrationResponseKey": {
                            "description": "The integration response key.",
                            "type": "string"
                        },
                        "ResponseParameters": {
                            "description": "A key-value map specifying response parameters that are passed to the method\n response from the backend. The key is a method response header parameter name and the\n mapped value is an integration response header value, a static value enclosed within\n a pair of single quotes, or a JSON expression from the integration response body. The\n mapping key must match the pattern of method.response.header.{name}, where name is a\n valid and unique header name. The mapped non-static value must match the pattern of\n integration.response.header.{name} or integration.response.body.{JSON-expression},\n where name is a valid and unique response header name and JSON-expression is a valid\n JSON expression without the $ prefix.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "A string with a length between [1-512].",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "ResponseTemplates": {
                            "description": "The collection of response templates for the integration response as a\n string-to-string map of key-value pairs. Response templates are represented as a\n key/value map, with a content-type as the key and a template as the value.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "A string with a length between [0-32768].",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "TemplateSelectionExpression": {
                            "description": "The template selection expressions for the integration response.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "IntegrationResponseKey"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfModel": {
                "items": {
                    "description": "Represents a data model for an API. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html\">Create Models and Mapping Templates for Request and Response\n Mappings</a>.",
                    "properties": {
                        "ContentType": {
                            "description": "The content-type for the model, for example, \"application/json\".",
                            "type": "string"
                        },
                        "Description": {
                            "description": "The description of the model.",
                            "type": "string"
                        },
                        "ModelId": {
                            "description": "The model identifier.",
                            "type": "string"
                        },
                        "Name": {
                            "description": "The name of the model. Must be alphanumeric.",
                            "type": "string"
                        },
                        "Schema": {
                            "description": "The schema for the model. For application/json models, this should be JSON schema\n draft 4 model.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "Name"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfRoute": {
                "items": {
                    "description": "Represents a route.",
                    "properties": {
                        "ApiKeyRequired": {
                            "description": "Specifies whether an API key is required for this route.",
                            "type": "boolean"
                        },
                        "AuthorizationScopes": {
                            "description": "A list of authorization scopes configured on a route. The scopes are used with a\n COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization\n works by matching the route scopes against the scopes parsed from the access token in\n the incoming request. The method invocation is authorized if any route scope matches\n a claimed scope in the access token. Otherwise, the invocation is not authorized.\n When the route scope is configured, the client must provide an access token instead\n of an identity token for authorization purposes.",
                            "items": {
                                "description": "A string with a length between [1-64].",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "AuthorizationType": {
                            "description": "The authorization type for the route. Valid values are NONE for open\n access, AWS_IAM for using AWS IAM permissions, and CUSTOM\n for using a Lambda\n authorizer",
                            "enum": [
                                "NONE",
                                "AWS_IAM",
                                "CUSTOM"
                            ],
                            "type": "string"
                        },
                        "AuthorizerId": {
                            "description": "The identifier of the Authorizer resource to be associated with this\n route, if the authorizationType is CUSTOM\n . The authorizer identifier is generated by API Gateway\n when you created the authorizer.",
                            "type": "string"
                        },
                        "ModelSelectionExpression": {
                            "description": "The model selection expression for the route.",
                            "type": "string"
                        },
                        "OperationName": {
                            "description": "The operation name for the route.",
                            "type": "string"
                        },
                        "RequestModels": {
                            "description": "The request models for the route.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "A string with a length between [1-128].",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "RequestParameters": {
                            "description": "The request parameters for the route.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                        "properties": {
                                            "Required": {
                                                "description": "Whether or not the parameter is required.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "RouteId": {
                            "description": "The route ID.",
                            "type": "string"
                        },
                        "RouteKey": {
                            "description": "The route key for the route.",
                            "type": "string"
                        },
                        "RouteResponseSelectionExpression": {
                            "description": "The route response selection expression for the route.",
                            "type": "string"
                        },
                        "Target": {
                            "description": "The target for the route.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "RouteKey"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfRouteResponse": {
                "items": {
                    "description": "Represents a route response.",
                    "properties": {
                        "ModelSelectionExpression": {
                            "description": "Represents the model selection expression of a route response.",
                            "type": "string"
                        },
                        "ResponseModels": {
                            "description": "Represents the response models of a route response.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "A string with a length between [1-128].",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "ResponseParameters": {
                            "description": "Represents the response parameters of a route response.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "Validation constraints imposed on parameters of a request (path, query string,\n headers).",
                                        "properties": {
                                            "Required": {
                                                "description": "Whether or not the parameter is required.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "RouteResponseId": {
                            "description": "Represents the identifier of a route response.",
                            "type": "string"
                        },
                        "RouteResponseKey": {
                            "description": "Represents the route response key of a route response.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "RouteResponseKey"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOfStage": {
                "items": {
                    "description": "Represents an API stage.",
                    "properties": {
                        "AccessLogSettings": {
                            "description": "Settings for logging access in this stage.",
                            "properties": {
                                "DestinationArn": {
                                    "description": "The ARN of the CloudWatch Logs log group to receive access logs.",
                                    "type": "string"
                                },
                                "Format": {
                                    "description": "A single line format of the access logs of data, as specified by selected $context\n variables. The format must include at least $context.requestId.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "ClientCertificateId": {
                            "description": "The identifier of a client certificate for a Stage.",
                            "type": "string"
                        },
                        "CreatedDate": {
                            "description": "The timestamp when the stage was created.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "DefaultRouteSettings": {
                            "description": "Default route settings for the stage.",
                            "properties": {
                                "DataTraceEnabled": {
                                    "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                    "type": "boolean"
                                },
                                "DetailedMetricsEnabled": {
                                    "description": "Specifies whether detailed metrics are enabled.",
                                    "type": "boolean"
                                },
                                "LoggingLevel": {
                                    "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                    "enum": [
                                        "ERROR",
                                        "INFO",
                                        "false"
                                    ],
                                    "type": "string"
                                },
                                "ThrottlingBurstLimit": {
                                    "description": "Specifies the throttling burst limit.",
                                    "type": "integer"
                                },
                                "ThrottlingRateLimit": {
                                    "description": "Specifies the throttling rate limit.",
                                    "format": "double",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "DeploymentId": {
                            "description": "The identifier of the Deployment that the Stage is\n associated with.",
                            "type": "string"
                        },
                        "Description": {
                            "description": "The description of the stage.",
                            "type": "string"
                        },
                        "LastUpdatedDate": {
                            "description": "The timestamp when the stage was last updated.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "RouteSettings": {
                            "description": "Route settings for the stage.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "Represents a collection of route settings.",
                                        "properties": {
                                            "DataTraceEnabled": {
                                                "description": "Specifies whether (true) or not (false) data trace\n logging is enabled for this route. This property affects the log entries pushed to\n Amazon CloudWatch Logs.",
                                                "type": "boolean"
                                            },
                                            "DetailedMetricsEnabled": {
                                                "description": "Specifies whether detailed metrics are enabled.",
                                                "type": "boolean"
                                            },
                                            "LoggingLevel": {
                                                "description": "Specifies the logging level for this route: DEBUG, INFO,\n or WARN. This property affects the log entries pushed to Amazon\n CloudWatch Logs.",
                                                "enum": [
                                                    "ERROR",
                                                    "INFO",
                                                    "false"
                                                ],
                                                "type": "string"
                                            },
                                            "ThrottlingBurstLimit": {
                                                "description": "Specifies the throttling burst limit.",
                                                "type": "integer"
                                            },
                                            "ThrottlingRateLimit": {
                                                "description": "Specifies the throttling rate limit.",
                                                "format": "double",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "StageName": {
                            "description": "The name of the stage.",
                            "type": "string"
                        },
                        "StageVariables": {
                            "description": "A map that defines the stage variables for a stage resource. Variable names can\n have alphanumeric and underscore characters, and the values must match\n [A-Za-z0-9-._~:/?#&=,]+.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "A string with a length between [0-2048].",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "StageName"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "__listOf__string": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "__string": {
                "type": "string"
            },
            "__timestampIso8601": {
                "format": "date-time",
                "type": "string"
            }
        },
        "parameters": {
            "Action": {
                "in": "query",
                "name": "Action",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Version": {
                "in": "query",
                "name": "Version",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Algorithm": {
                "in": "header",
                "name": "X-Amz-Algorithm",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Content-Sha256": {
                "in": "header",
                "name": "X-Amz-Content-Sha256",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Credential": {
                "in": "header",
                "name": "X-Amz-Credential",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Date": {
                "in": "header",
                "name": "X-Amz-Date",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Security-Token": {
                "in": "header",
                "name": "X-Amz-Security-Token",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Signature": {
                "in": "header",
                "name": "X-Amz-Signature",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-SignedHeaders": {
                "in": "header",
                "name": "X-Amz-SignedHeaders",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "GetApisBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {},
                            "type": "object"
                        }
                    }
                },
                "required": true
            }
        },
        "securitySchemes": {
            "hmac": {
                "description": "Amazon Signature authorization v4",
                "in": "header",
                "name": "Authorization",
                "type": "apiKey",
                "x-amazon-apigateway-authtype": "awsSigv4"
            }
        }
    }
}